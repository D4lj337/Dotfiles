#+TITLE: Emacs configuration
#+DESCRIPTION: Emacs configuration is written in orgmode. Code is directly written to the files using org-babel-tangle without the need to start orgmode at startup.
#+PROPERTY: header-args :lexical t :tangle "init.el" :mkdirp "lisp"
#+STARTUP: showeverything  hidestars

* Must Reads
1. [[https://discourse.doomemacs.org/t/common-config-anti-patterns/119][Common config anti-patters]]
2. [[https://discourse.doomemacs.org/t/common-errors-how-to-deal-with-them/58][Common errors & how to deal with them]]
;; "My" tricks for <1s startup time (GUI Emacs on ~5 year old laptop):

;;Link:https://www.reddit.com/r/emacs/comments/lkfuk5/comment/gnk42ta/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button

Defer most packages using ***use-package*** (most important)
increase ***gc-cons-threshold*** during startup

use ***early-init.el*** to set graphical parameters and fonts

make sure scratch starts in fundamental-mode

avoid ***set-face-attributes***

avoid ***load-theme***

avoid ***require*** during startup

don't use ****:init** in use-package

use ***esup*** to find things that slow down startup

use ***package-quickstart***

unset ***file-name-handler-alist*** during startup

* Early-init
=Early-init= made for speed up Emacs.

#+BEGIN_SRC elisp :tangle "early-init.el"
  ;; early-init.el -*- lexical-binding: t; -*-

  ;; Increase 'gc-cons-threshold' to 100MB for lsp heavy buffers.
  (setq gc-cons-threshold 100000000)

  ;; Handle large chunks of process output, improving peroformence of external processes (like LSP servers)
  (setq read-process-output-max (* 1024 1024)) ;; 1 MB

  ;; Use 'lsp-use-plists' for faster deserialization
  (setenv "LSP_USE_PLISTS" "true")
  (setq lsp-use-plists t)

  ;; Disable "file-name-handler-alist" than enable it later for speed.
  (defvar startup/file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist startup/file-name-handler-alist)
              (makunbound 'startup/file-name-handler-alist)))

  ;; Speed up package loading
  (setq package-quickstart t)

  ;; Loads packages only when needed
  (setq use-package-always-defer t)
#+END_SRC

** Disable menu and scrollbar
#+BEGIN_SRC elisp :tangle "early-init.el"
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (global-tab-line-mode -1) ; tab line
  (tab-bar-mode -1) ; tabs
  (global-visual-line-mode t) ; don't let the text to go horizontal.
  (global-hl-line-mode t) ; highlight the line you're on.
  (global-display-line-numbers-mode t) ; Slow down with big files.
  (electric-pair-mode t) ;; auto brackets.
  (electric-indent-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

** Remeber last place you were in file.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (save-place-mode 1)
#+END_SRC

** Auto revert buffer for changed files.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (global-auto-revert-mode t)
#+END_SRC

** Auto revert dired buffer

#+BEGIN_SRC elisp :tangle "early-init.el"
(setq global-auto-revert-non-file-buffers t)
#+END_SRC
** Open Emacs in full screen always.

#+BEGIN_SRC elisp :tangle "early-init.el"
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Preventing flickering.
#+begin_src elisp :tangle "early-init.el"
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+end_src

** Show parenthesis.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq show-paren-style 'expression)
  (show-paren-mode 1)
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-foreground 'show-paren-match "#def")
  (custom-set-faces
   '(show-paren-match ((t (:weight extra-bold)))))
#+END_SRC

** UTF
#+BEGIN_SRC elisp :tangle "early-init.el"
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+END_SRC

** Major settings
#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq
   package-enable-at-startup nil ; don't auto-initialize!
   package-enable-imenu-support t
   package--init-file-ensured t ; don't add that `custom-set-variables' block to init
   package-archives nil
   load-prefer-newer t ; prefer newer package files.
   frame-resize-pixelwise t
   visible-bell 1 ; Alarm bell (flash the bar)

   ;; Tab behaviour
   completion-cycle-threshold 3 ;; TAB cycle if there are only few candidates
   tab-always-indent 'complete ;; Enable indentation+completion using the TAB key.
   tab-line-new-button-show nil
   echo-keystrokes 0.01 ;; decrease the echoing of the keystrokes.

   ;; Tab line
   tab-line-close-button-show nil
   tab-line-separator " "
   line-move-visual nil
   site-run-file nil ; unset SRF
   pixel-scroll-precision-mode t
   pixel-scroll-precision-use-momentum t
   scroll-conservatively 101 ;; scroll line by line.
   use-file-dialog nil
   mode-line-format nil ; don't want a mode line while loading init
   create-lockfiles nil ; disable lockfiles
   make-backup-files nil ; disable backup file
   backup-directory-alist '((".*" . "~/.local/share/Trash/files"))

   ;; Disable auto save alltogether.
   auto-save-list-file-prefix nil ; disable auto-save
   auto-save-default nil
   auto-save-mode nil
   delete-auto-save-files t ; delete auto save files

   auto-mode-case-fold nil ; use case-sensitive `auto-mode-alist' for performance
   default-input-method nil
   utf-translate-cjk-mode nil ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
   initial-scratch-message nil ; empty the initial *scratch* buffer.
   message-log-max nil
   command-line-x-option-alist nil ; remove irreleant command line options for faster startup
   use-short-answers t ; y/n for yes/no
   vc-follow-symlinks t ; Do not ask about symlink following
   use-dialog-box nil
   inhibit-default-init t
   use-file-dialog nil
   redisplay-dont-pause t ; improve display engine

   ;; Suppress the startup
                                          ;inhibit-splash-screen t
                                          ;inhibit-startup-screen t		; do not show the startup message
                                          ;inhibit-startup-message t      ; reduce noise at startup
                                          ;inhibit-startup-buffer-menu t  ; stop `list-buffers' from showing when opening multiple files

   frame-inhibit-implied-resize t ; do not resize the frame at this early stage
   ffap-machine-p-known 'reject   ; don't ping things that look like domain names

   ;; Improve performance
   inhibit-compacting-font-caches t ; Inhibit frame resizing for performance
   read-process-output-max (* 1024 1024) ; Increase how much is read from processes in a single chunk.
   fast-but-imprecise-scrolling t ; more performant rapid scrolling over unfontified regions
   scroll-conservatively 101
   scroll-margin 0
   scroll-preserve-screen-position t

   redisplay-skip-fontification-on-input t ; Inhibits it for better scrolling performance.
   idle-update-delay 1.0 ; slow down UI updates down
   select-active-regions 'only ; Emacs hangs when large selections contain mixed line endings
   ad-redefinition-action 'accept ; disable warnings from legacy advice system
   initial-major-mode 'fundamental-mode
   confirm-kill-emacs 'y-or-n-p ; confirm before exiting emacs
   enable-local-variables :safe ; host security
   column-number-mode t
   org-indent-mode nil
   display-line-numbers-type 'relative
   custom-file (make-temp-file "emacs-custom-")
   enable-recursive-minibuffers t                ; Use the minibuffer whilst in the minibuffer
   completion-cycle-threshold 1                  ; TAB cycles candidates
   completions-detailed t                        ; Show annotations
   tab-always-indent 'complete                   ; When I hit TAB, try to complete, otherwise, indent
   completion-styles '(basic initials substring) ; Different styles to match input to candidates

   completion-auto-help 'always                  ; Open completion always; `lazy' another option
   completions-max-height 20                     ; This is arbitrary
   completions-detailed t
   completions-format 'one-column
   completions-group t
   completion-auto-select 'second-tab            ; Much more eager
   x-stretch-cursor nil


   hscroll-margin 2
   hscroll-step 1
   ;; Emacs spends too much effort recentering the screen if you scroll the
   ;; cursor more than N lines past window edges (where N is the settings of
   ;; `scroll-conservatively'). This is especially slow in larger files
   ;; during large-scale scrolling commands. If kept over 100, the window is
   ;; never automatically recentered. The default (0) triggers this too
   ;; aggressively, so I've set it to 10 to recenter if scrolling too far
   ;; off-screen.
   scroll-conservatively 10
   scroll-margin 0
   scroll-preserve-screen-position t
   ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
   ;; for tall lines.
   auto-window-vscroll nil
   ;; mouse
   mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
   mouse-wheel-scroll-amount-horizontal 2

   confirm-nonexistent-file-or-buffer nil

                                          ;  (setq-default isearch-lazy-count t)
   enable-recursive-minibuffers t
   kill-ring-max 100

  ; frame-title-format "E M A C S"

  ; browse-url-browser-function 'browse-url-xdg-open

  ; custom-safe-themes t

   ;; Prevent unwanted runtime builds; packages are compiled ahead-of-time when
   ;; they are installed and site files are compiled when gccemacs is installed.
   ;; (setq comp-deferred-compilation nil)
   native-comp-jit-compilation t

   native-comp-async-report-warnings-errors nil

   ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
   ;; compiled ahead-of-time when they are installed and site files are compiled
   ;; when gccemacs is installed.
   comp-deferred-compilation nil

   ;; Compile all sites-lisp on demand.
   native-comp-jit-compilation t

   ;; Keep the eln cache clean.
   native-compile-prune-cache t

   ;; Solve slow icon rendering
   inhibit-compacting-font-caches t

   ;; Enable ibuffer
   ibuffer-expert t

   display-buffer-alist nil

   select-enable-clipboard t ;; Copy and Paste outside of Emacs
   )

  (defalias 'yes-or-no-p 'y-or-n-p) ; yes or no to y or n
;  (add-hook 'prog-mode-hook 'display-line-numbers-mode) ; Only use line-numbers in major modes
;  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (windmove-default-keybindings)

  ;; Improve memory
  (setq-default history-length 1000)
  (setq-default prescient-history-length 1000)
#+END_SRC

** Fonts
#+BEGIN_SRC elisp :tangle "early-init.el"
  (custom-set-faces
   ;; Default font for all text
   '(default ((t (:family "Roboto Mono" :height 110))))
   '(fixed-pitch ((t (:family "Roboto Mono" :height 100))))

   ;; Current line number
   '(line-number-current-line ((t (:foreground "yellow" :inherit line-number))))
   '(mode-line ((t (:family "Roboto Mono" :weight Bold))))

   ;; Comments italic
   '(font-lock-comment-face ((t (:family "JetBrains Mono":slant italic))))
   ;; Keywords, functions, strings, etc. italic with no color change
   '(font-lock-keyword-face ((t (:family "JetBrains Mono" :slant italic))))
   '(font-lock-function-name-face ((t (:slant italic))))
   '(font-lock-string-face ((t (:family "JetBrains Mono" :slant italic))))
   '(font-lock-variable-name-face ((t (:family "JetBrains Mono":slant italic))))
   '(font-lock-constant-face ((t (:family "JetBrains Mono" :slant italic))))
   '(font-lock-type-face ((t (:family "JetBrains Mono" :slant italic))))
   '(font-lock-builtin-face ((t (:family "JetBrains Mono" :slant italic))))
   )
  #+end_src

* Package Management
** Straight
#+BEGIN_SRC elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

** Use-package
#+BEGIN_SRC elisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
#+END_SRC

** Maximum native eln speed.
Look for native-compile-async using variable "C-h v =native-comp-eln-load-path="
#+BEGIN_SRC elisp

  (require 'use-package)
  (setq use-package-compute-statistics t)

  ;; init.el -*- lexical-binding: t; -*-
  (setq native-comp-speed 3)

  (native-compile-async "/usr/lib/emacs/30.2/native-lisp" 'recursively)
  (setq native-comp-compiler-options '("-march=znver2" "-Ofast" "-g0" "-fno-finite-math-only" "-fgraphite-identity" "-floop-nest-optimize" "-fdevirtualize-at-ltrans" "-fipa-pta" "-fno-semantic-interposition" "-flto=auto" "-fuse-linker-plugin"))

  (setq native-comp-driver-options '("-march=znver2" "-Ofast" "-g0" "-fno-finite-math-only" "-fgraphite-identity" "-floop-nest-optimize" "-fdevirtualize-at-ltrans" "-fipa-pta" "-fno-semantic-interposition" "-flto=auto" "-fuse-linker-plugin"))
     #+END_SRC

* General settings

** Emacs
#+BEGIN_SRC elisp
  ;; init.el -*- lexical-binding: t; -*-
  ;; Global tab width and use spaces
  (use-package emacs
    :ensure nil
    :defer t
    :bind
    (("C-c e" . 'my/visit-init)              ;; visit init.el
     ("C-c q" . 'my/visit-qtile)             ;; visit qtile config
     ("C-c k" . 'my/kill-all-buffers)        ;; kill all buffers
     ("<f11>" . 'my/toggle-mode-line)        ;; toggle modeline
     ("<f12>" . 'my/zen-mode)        ;; toggle olivetti (zen mode)
     ("C-x 2" . 'my/split-and-follow-horizontally)
     ("C-x 3" . 'my/split-and-follow-vertically)
     ("C-c w w" . 'my/kill-whole-word)
     ("C-c w l" . 'my/copy-whole-line)
     ("C-c w h" . 'my/highlight-word)
     ("C-c i" . 'my/indent-whole-buffer)
     ("C-c v" . view-mode)
     ("C-x r" . restart-emacs)              ;; restart emacs
     ("C-c r" . recentf)                    ;; recent files list
     ("C-x C-k" . kill-buffer)              ;; kill buffer
     ("C-c p" . dmenu)
     ("C-c T" . vterm)
     ("C-c t" . vterm-toggle-cd)
     ("C-c y" . yas-expand)
     ("C-x B" . infu-bionic-reading-buffer)
     ("C-+" . text-scale-increase)
     ("C--" . text-scale-decrease)
     ("<C-wheel-down>" . text-scale-increase)
     ("<C-wheel-up>" . text-scale-decrease)
     ("C-c n" . neotree-toggle)
     ("C-." . avy-goto-char)
     ("C-c c" . compile)
     ("C-c b" . nyan-mode)
     ("C-c C-u" . package-upgrade-all)
     ("C-c g" . gdb)
     ("M-y" . popup-kill-ring)
     ("C-z" . nil))
    :custom
    (tab-width 4)
    (indent-tabs-mode nil)
    (org-startup-indented nil)
    (treesit-font-lock-level 4)
    (enable-recursive-minibuffers t)
    (read-extended-command-predicate #'command-completion-default-include-p)
    (treesit-auto-install-grammar t) ; EMACS-31
    (delete-by-moving-to-trash t) ;; Move deleted files to trash instead of permantenly deleting
    (split-width-threshold 300)
    (switch-to-buffer-obey-display-actions t)
    (tab-always-indent 'complete)
    (use-short-answers t)
    (warning-minimum-level :emergency)
    (enable-recursive-minibuffers t)) ; Enable recursive minibuffers

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+END_SRC

** Visible bell
#+BEGIN_SRC elisp
  (setq visible-bell nil
        ring-bell-function 'double-flash-mode-line)
  (defun double-flash-mode-line ()
    (let ((flash-sec (/ 3.0 20)))
      (invert-face 'mode-line)
      (run-with-timer flash-sec nil #'invert-face 'mode-line)))
#+end_src

** Disable line numbers, mode-line, tab-bar and etc.
#+BEGIN_SRC elisp
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  dashboad-mode-hook
                  neotree-mode-hook
                  dashboard-mode-hook
                  pdf-view-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0) (setq mode-line-format nil) (tab-bar-mode 0) (tab-line-mode 0))))
#+END_SRC

** Whitespace cleanUp
#+begin_src elisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

** Bionic Reading
#+BEGIN_SRC elisp :tangle "lisp/bionic-reading.el"
  ;; -*- lexical-binding: t; -*-
  (defvar infu-bionic-reading-face nil "a face for `infu-bionic-reading-region'.")

  (setq infu-bionic-reading-face 'bold)
  ;; try
  ;; 'bold
  ;; 'error
  ;; 'warning
  ;; 'highlight
  ;; or any value of M-x list-faces-display

  (defun infu-bionic-reading-buffer ()
    "Bold the first few chars of every word in current buffer.
    Version 2022-05-21"
    (interactive)
    (infu-bionic-reading-region (point-min) (point-max)))

  (defun infu-bionic-reading-region (Begin End)
    "Bold the first few chars of every word in region.
    Version 2022-05-21"
    (interactive "r")
    (let (xBounds xWordBegin xWordEnd  )
      (save-restriction
        (narrow-to-region Begin End)
        (goto-char (point-min))
        (while (forward-word)
          ;; bold the first half of the word to the left of cursor
          (setq xBounds (bounds-of-thing-at-point 'word))
          (setq xWordBegin (car xBounds))
          (setq xWordEnd (cdr xBounds))
          (setq xBoldEndPos (+ xWordBegin (1+ (/ (- xWordEnd xWordBegin) 2))))
          (put-text-property xWordBegin xBoldEndPos
                             'font-lock-face infu-bionic-reading-face)))))

  (provide 'bionic-reading)
#+END_SRC

** Features

*** Zen mode
#+begin_src elisp
  (defun my/zen-mode ()
    "Toggle Olivetti mode with additional distraction-free settings."
    (interactive)
    (if olivetti-mode
        (progn
          (olivetti-mode 0)
          (display-line-numbers-mode 1))  ;; Re-enable line numbers
      (progn
        (olivetti-mode 1)
        (display-line-numbers-mode -1)))) ;; Disable line numbers
#+end_src

*** Auto tangle
#+begin_src elisp
  (defun my/tangle-config-org-on-save ()
    "Automatically tangle config.org after saving."
    (when (string-equal (buffer-file-name)
                        (expand-file-name "config.org" user-emacs-directory))
      (org-babel-tangle)
      (message "Tangling completed")))
  (add-hook 'after-save-hook #'my/tangle-config-org-on-save)
#+end_src


*** Don't let the specified get killed.
#+BEGIN_SRC elisp
  ;; -*- lexical-binding: t; -*-
  (defun my/protect-vital-buffers ()
    "Prevent killing vital buffers."
    (not (member (buffer-name) '("*Welcome-screen*"))))
  (message "I'm Immortal")
  (add-hook 'kill-buffer-query-functions #'my/protect-vital-buffers)
#+END_SRC

*** Toggle modeline
#+BEGIN_SRC elisp
  (defun my/toggle-mode-line ()
    "Toggles the modeline on and off."
    (interactive)
    (setq mode-line-format
          (if (equal mode-line-format nil)
              (default-value 'mode-line-format)) )
    (redraw-display))
#+end_src

*** Visit the config.
#+BEGIN_SRC elisp
  (defun my/visit-init ()
    "Open the Emacs init file."
    (interactive)
    (message "Opening Emacs Init")
    (find-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

*** Visit the qtile config.
#+BEGIN_SRC elisp
  (defun my/visit-qtile ()
    "Open the qtile cofnig file."
    (interactive)
    (message "Opening Qtile Configuration")
    (find-file "~/.config/qtile/config.py"))
#+END_SRC

*** Highlight the word.
#+BEGIN_SRC elisp
  (defun my/highlight-word ()
    "Highlight the current word you are on."
    (interactive)
    (message "Highlighting word")
    (backward-word 1)
    (set-mark-command nil)
    (forward-word 1))
#+END_SRC

*** Close all buffers
#+BEGIN_SRC elisp
  (defun my/kill-all-buffers ()
    "Kill all the buffers."
    (interactive)
    (message "Killed all buffers")
    (mapc 'kill-buffer (buffer-list)))
#+end_src

*** Switch cursor automatically to new window.
#+BEGIN_SRC elisp
  (defun my/split-and-follow-horizontally ()
    "Split horziontally and follow."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun my/split-and-follow-vertically ()
    "Split vertically and follow."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC

*** Kill the whole word
#+BEGIN_SRC elisp
  (defun my/kill-whole-word ()
    "kill the whole word."
    (interactive)
    (message "Killed whole word")
    (backward-word)
    (kill-word 1))
#+END_SRC

*** Copy the whole line
#+BEGIN_SRC elisp
  (defun my/copy-whole-line ()
    "Copy whole line."
    (interactive)
    (message "Copied whole line")
    (save-excursion
      (kill-new
       (buffer-substring
        (pos-bol)
        (pos-eol)))))
#+END_SRC

*** Indent whole buffer
#+begin_src elisp
  (defun my/indent-whole-buffer ()
    "Indent the entire buffer without affecting point or mark."
    (interactive)
    (save-excursion
      (save-restriction
        (indent-region (point-min) (point-max)))))
#+end_src

* Pacakges
** COMMENT Dired Async
Builtin package allows =Dired= operations like copying and renaming files to run asynchronously.
#+begin_src elisp
  (use-package dired-async
    :ensure nil
    :straight nil
    :mode (dired . dired-async))
#+end_src

** Icons
#+BEGIN_SRC elisp
  (use-package nerd-icons
    :ensure t
    :straight t
    :hook  nerd-icons)

  (use-package nerd-icons-dired
    :ensure t
    :straight t
    :hook (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-completion
    :ensure t
    :straight t
    :hook (emacs-startup-hook . nerd-icons-completion-mode))
#+END_SRC

** Vterm & vterm-toggle
#+BEGIN_SRC elisp
  (use-package vterm
    :ensure t
    :straight t
    :commands (vterm))

  (use-package vterm-toggle
    :ensure t
    :straight t
    :commands (vterm-toggle))
#+END_SRC

** Which key
#+BEGIN_SRC elisp
  (use-package which-key
    :ensure t
    :straight t
    :hook (emacs-startup-hook . which-key-mode)
    :custom
    (which-key-lighter "")
                                          ;  (which-key-sort-order #'which-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    (which-key-compute-remaps t)
    (which-key-side-window-slot -10)
    (which-key-separator " -> ")
    (which-key-allow-evil-operators t)
    (which-key-use-C-h-commands t)
    (which-key-show-remaining-keys t)
    (which-key-show-prefix 'bottom)
    :custom
    (setq which-key-idle-delay 0.3) ;; company-idle-delay set to low causes latency while typing use with caution.
    (which-key-setup-side-window-bottom)
    (which-key-setup-minibuffer))
#+END_SRC

** Persistent history.
#+BEGIN_SRC elisp
  (use-package savehist
    :straight nil
    :hook (emacs-startup-hook . savehist-mode)
    :custom
    (history-length 15))
#+END_SRC

** Hardtime
#+BEGIN_SRC elisp
  (use-package hardtime
    :ensure t
    :straight t
    :disabled t
    :custom
    (defun evil-hardtime-check-command ()
      "Return non-nil if the currently executed command should be checked."
      (memq this-command '( next-line previous-line evil-previous-visual-line
                            right-char left-char left-word right-word
                            evil-forward-char evil-backward-char
                            evil-next-line evil-previous-line)))
    (hardtime-predicate #'evil-hardtime-check-command)
    :hook
    (text-mode . hardtime-mode)
    (prog-mode . hardtime-mode))
#+END_SRC

* Writing
** Org
#+BEGIN_SRC elisp
  ;; Org mode, if you still want it for notes/tasks
  (use-package org
    :ensure nil
    :straight nil
    :mode ("\\.org\\'" . org-mode)
    :custom
    (setq org-agenda-files '("~/Documents/org/")
          org-log-done 'time
          org-hide-emphasis-markers t
          org-ellipsis "  ."
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-pretty-entities t
          org-edit-src-content-indentation 0)

    ;; Org babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (lisp . t)
       (shell . t)
       (lua . t)
       (calc . t)
       (sql . t)
       (C . t))))

    (with-eval-after-load 'org
      ;; Org document title color and size
      (set-face-attribute 'org-document-title nil :foreground "#D160A6" :height 1.0 :weight 'bold)
      ;; Org headings levels 1-7 beautiful colors
      (set-face-attribute 'org-level-1 nil :foreground "#D16D9E" :height 1.5 :weight 'bold)
      (set-face-attribute 'org-level-2 nil :foreground "#89B8C2" :height 1.4 :weight 'bold)
      (set-face-attribute 'org-level-3 nil :foreground "#E4B062" :height 1.3 :weight 'bold)
      (set-face-attribute 'org-level-4 nil :foreground "#8FA88C" :height 1.2 :weight 'bold)
      (set-face-attribute 'org-level-5 nil :foreground "#6094AF" :weight 'bold)
      (set-face-attribute 'org-level-6 nil :foreground "#BF9F84" :weight 'bold)
      (set-face-attribute 'org-level-7 nil :foreground "#B86B6B" :weight 'bold))

      ;;;; Overcome the problem of 'org-mode' font lock after opening a file.
  ;;  (defun my/force-org-font-lock ()
  ;;    "Force font-lock to apply to the whole buffer"
  ;;    (font-lock-ensure))
  ;;  (add-hook 'org-mode-hook #'my/force-org-font-lock)
#+END_SRC

*** Org Modern
#+begin_src elisp
    (use-package org-modern
      :ensure t
      :straight t
      :hook ((org-mode . org-modern-mode)
             (org-agenda-finalize . org-modern-agenda))
      :custom
      (org-hide-emphasis-markers t)
      (org-pretty-entities t)
      (org-insert-heading-respect-content t)
      (org-agenda-tags-column 0))
#+end_src

** olivetti
#+begin_src elisp
  (use-package olivetti
    :ensure t
    :straight t
    :hook
    (org-mode . olivetti-mode)
    :demand t
    :custom
    ;; Set text width to a comfortable fraction of the window
    ( olivetti-body-width 0.9) ;; Or set as integer for fixed width
    ;; Set minimum body width for wide windows
    (olivetti-minimum-body-width 80)
    ;; Remember the state of visual-line-mode when entering/exiting Olivetti
    (olivetti-recall-visual-line-mode-entry-state t)
    ;; Choose how margins are rendered: 'margins, 'fringe, or 'fancy
    (olivetti-style 'fancy)
    ;; Optionally customize the fringe face for Olivetti buffers
    (custom-set-faces
     '(olivetti-fringe ((t (:background "#111111"))))))
#+end_src

* Vim Layer
** Evil mode
#+BEGIN_SRC elisp
  (use-package evil
    :ensure t
    :straight t
    :hook (emacs-startup-hook . evil-mode)
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-u-delete t)
    (evil-default-state 'normal)
    (evil-set-initial-state 'dired-mode 'normal)
    :bind
    (:map evil-normal-state-map
          ("SPC f" . find-file)
          ("SPC d" . dired)
          ("SPC pv" . dired-jump)
          ("SPC c" . compile)
          ("SPC w" . save-buffer)
          ("SPC q" . evil-quit)
          ("SPC r" . restart-emacs)
          ("SPC b b" . ibuffer)
          ("SPC b" . switch-to-buffer)
          ("SPC u" . undo)
          ("SPC z" . undo-redo)
          ("SPC g U" . evil-upcase)
          ("SPC SPC" . org-babel-tangle)
          ("SPC t" . vterm-toggle-cd)
          ("SPC o" . other-window)
          ("SPC k" . kill-buffer)
          ("gcc" . comment-line)))
#+END_SRC

** Evil collection
#+BEGIN_SRC elisp
  (use-package evil-collection
    :ensure t
    :straight t
    :commands (evil-collection-init))
#+END_SRC

** Evil tutor
#+BEGIN_SRC elisp
  (use-package evil-tutor
    :ensure t
    :straight t
    :commands (evil-tutor))
#+END_SRC

* Theme
** Catppuccin
#+BEGIN_SRC elisp
 (load-theme 'modus-vivendi t)

;;  (use-package catppuccin-theme
;;    :ensure t
;;    :straight t
;;    :custom
;;    (catppuccin-flavor 'mocha)
;;    :hook
;;    (emacs-startup . (lambda ()
;;                       (catppuccin-set-color 'base "#000000")
;;                       (catppuccin-set-color 'mantle "#000000" 'mocha)
;;                       (catppuccin-set-color 'crust "#000000" 'mocha)
;;                       (load-theme 'catppuccin t :no-confirm)
;;                       (catppuccin-reload))))


  ;;  (use-package catppuccin-theme
  ;;    :ensure t
  ;;    :straight t
  ;;    :config
  ;;    (setq catppuccin-flavor 'mocha)
  ;;    (catppuccin-set-color 'base "#000000")
  ;;    (catppuccin-set-color 'mantle "#000000" 'mocha)
  ;;    (catppuccin-set-color 'crust "#000000" 'mocha)
  ;;    (load-theme 'catppuccin t)
  ;;    (catppuccin-reload))
#+END_SRC

* Programming

** M-x compile
#+BEGIN_SRC elisp
  (defun compile-and-run-current-file ()
    "Compile or run the current file depending on its extension."
    (interactive)
    (let* ((file (buffer-file-name))
           (ext (file-name-extension file))
           (cmd
            (cond
             ((member ext '("c"))
              (format "gcc '%s' -o /tmp/a.out && /tmp/a.out" file))
             ((member ext '("asm" "s"))

              (format "nasm -f elf64 %s -o /tmp/a.o && ld /tmp/a.o -o /tmp/a.out && /tmp/a.out" file))
             ((member ext '("py"))
              (format "python3 %s" file))
             ((member ext '("lua"))
              (format "lua %s" file))
             (t (format "chmod +x %s && %s" file file)))))
      (compilation-start cmd)))

  (add-to-list 'display-buffer-alist
               '("\\*compilation\\*"
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 (window-height . 0.25)))

  (global-set-key (kbd "C-c r") 'compile-and-run-current-file)
#+END_SRC

** GDB
#+BEGIN_SRC elisp
  (use-package gdb-mi
    :ensure t
    :straight (:host github :repo "weirdNox/emacs-gdb" :files ("*.el" "*.c" "*.h" "Makefile"))
    :custom
    (fmakunbound 'gdb)
    (fmakunbound 'gdb-enable-debug))
#+END_SRC

** COMMENT Eglot
#+begin_src elisp
  (use-package eglot
    :ensure nil
    :straight nil
    :hook ((c-mode c++-mode python-mode bash-mode lua-mode sh-mode asm-mode) . eglot-ensure)
    :config
    ;; CRITICAL: Disable flymake integration - we use flycheck exclusively
    (add-to-list 'eglot-stay-out-of 'flymake)
    (eglot-sync-connect nil)

    ;; Enhanced LSP communication settings
    (eglot-events-buffer-size 0)            ; Disable events buffer for performance
    (eglot-autoshutdown t)                  ; Auto-shutdown unused servers
    (eglot-sync-connect nil)                ; Async connection for responsiveness
    (eglot-extend-to-xref t)                ; Enhanced cross-references
    (eglot-report-progress nil)            ; Disable progress reports for focus

    :custom
    ;; Server performance optimizations
    (eglot-events-buffer-config '(:size 0 :format short))
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(c-ts-mode . ("clangd" "--offset-encoding=utf-16" "ccls")))
      (add-to-list 'eglot-server-programs
                   '(c++-ts-mode . ("clangd" "--offset-encoding=utf-16" "ccls")))
      (add-to-list 'eglot-server-programs
                   '(python-ts-mode . ("python-flake8")))
      (add-to-list 'eglot-server-programs
                   '(lua-ts-mode . ("lua-language-server")))
      (add-to-list 'eglot-server-programs
                   '(bash-ts-mode . ("bash-language-server" "start" "spellcheck"))))

    ;; Ensure eglot starts with Tree-sitter modes
    (dolist (mode '(python-ts-mode c-ts-mode c++-ts-mode bash-ts-mode lua-ts-mode))
      (add-hook (intern (format "%s-hook" mode)) #'eglot-ensure))

    ;; Key bindings for LSP operations
    :bind (:map eglot-mode-map
                ("C-c l r" . eglot-rename)
                ("C-c l a" . eglot-code-actions)
                ("C-c l f" . eglot-format)
                ("C-c l d" . eglot-find-declaration)
                ("C-c l i" . eglot-find-implementation)
                ("C-c l t" . eglot-find-typeDefinition)))

;;  (add-to-list 'major-mode-remap-alist
;;               '(python-mode . python-ts-mode)
;;               '(c-mode . c-ts-mode)
;;               '(lua-mode . lua-ts-mode)
;;               '(bash-mode . bash-ts-mode))
#+end_src

** COMMENT Treesitter
#+begin_src elisp
  ;; Ensure you have the packages installed
  (straight-use-package 'tree-sitter)
  (straight-use-package 'tree-sitter-langs)

  (require 'tree-sitter)
  (require 'tree-sitter-langs)

  ;; Remap major modes to their Tree-sitter variants
  (add-to-list 'major-mode-remap-alist
               '(python-mode . python-ts-mode))
  (add-to-list 'major-mode-remap-alist
               '(c-mode . c-ts-mode))
  (add-to-list 'major-mode-remap-alist
               '(bash-mode . bash-ts-mode))
  (add-to-list 'major-mode-remap-alist
               '(lua-mode . lua-ts-mode))

  ;; Optionally, enable global Tree-sitter minor mode
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

  (setq treesit-language-source-alist
        '((c    "https://github.com/tree-sitter/tree-sitter-c")
          (cpp  "https://github.com/tree-sitter/tree-sitter-cpp")
          (bash "https://github.com/tree-sitter/tree-sitter-bash")
          (lua  "https://github.com/tree-sitter/tree-sitter-lua")
          (python "https://github.com/tree-sitter/tree-sitter-python")))

  (use-package lua-mode
    :ensure t
    :straight t
    :mode ("\\.org\\'" . org-mode))
               #+end_src

** COMMENT Flymake
#+begin_src elisp
  (use-package flymake
    :ensure nil
    :straight nil
    :hook (prog-mode . flymake-mode)
    :custom
    (flymake-indicator-type 'margins)
    (flymake-margin-indicators-string
     `((error ,(propertize "┃"
                           'face '(:inherit compilation-error
                                            'display '((margin left-margin)))
                           compilation-error)

              (warning ,(propertize "┃"
                                    'face '(:inherit compilation-warning
                                                     'display '((margin left-margin)))
                                    compilation-warning)

                       (note ,(propertize "┃"
                                          'face '(:inherit compilation-info
                                                           'display '((margin left-margin)))
                                          compilation-info)))))))
                                  #+end_src

** COMMENT Flycheck
#+begin_src elisp
  (use-package flycheck
    :ensure t
    :straight t
    :hook ((prog-mode . flycheck-mode)
           (flycheck-mode .
                          (lambda ()
                            (define-fringe-bitmap 'my-flycheck-fringe-indicator
                              (vector #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111
                                      #b00011111)
                              20  ;; height
                              12) ;; width
                            (flycheck-define-error-level 'error
                              :severity 2
                              :overlay-category 'flycheck-error-overlay
                              :fringe-bitmap 'my-flycheck-fringe-indicator
                              :fringe-face 'flycheck-fringe-error)
                            (flycheck-define-error-level 'warning
                              :severity 1
                              :overlay-category 'flycheck-warning-overlay
                              :fringe-bitmap 'my-flycheck-fringe-indicator
                              :fringe-face 'flycheck-fringe-warning)
                            (flycheck-define-error-level 'info
                              :severity 0
                              :overlay-category 'flycheck-info-overlay
                              :fringe-bitmap 'my-flycheck-fringe-indicator
                              :fringe-face 'flycheck-fringe-info))))
    :bind (("C-c n" . flycheck-next-error)
           ("C-c p" . flycheck-previous-error)
           ("C-c l" . flycheck-list-errors)
           ("C-c v" . flycheck-verify-setup)
           ("C-c ?" . flycheck-describe-checker)
           ("C-c s" . flycheck-select-checker))
    :custom
    (flycheck-check-syntax-automatically '(save idle-change mode-enabled))
    (flycheck-highlighting-mode 'symbols)
    (flycheck-indication-mode 'left-fringe)
    (flycheck-standard-error-navigation t)
    (flycheck-deferred-syntax-check nil)
    (flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list)
    (flycheck-mode-line-prefix "⚠")
    (flycheck-checker-error-threshold nil)
    (flycheck-relevant-error-other-file-show t)
    (flycheck-auto-display-errors-after-checking t)
    (flymake-mode nil))
#+end_src

** COMMENT Eldoc
#+begin_src elisp
  (use-package eldoc
    :ensure nil
    :straight nil
    :hook (prog-mode . eldoc-mode))
#+end_src

* Completion

** Mini buffer
Below is a modern Emacs completion system configuration using use-package, leveraging only built-in packages (no Vertico, Ivy, or Helm). This setup uses fido-mode, fido-vertical-mode, and modern completion styles for a smooth, efficient experience:
#+begin_src elisp
  (use-package minibuffer
    :straight nil
    :ensure nil
    :hook (emacs-startup . (lambda ()
                             (fido-mode 1)
                             (fido-vertical-mode 1)
                             (setq completion-styles '(basic flex))))
    :custom
    (completions-format 'one-column)
    (completions-max-height 20)
    (completion-auto-help 'visible)
    (completion-auto-select nil)
    (completions-sort 'historical)
    (completion-ignore-case t)
    (completion-cycle-threshold 3)
    (define-key minibuffer-local-completion-map (kbd "C-n") 'minibuffer-next-completion)
    (define-key minibuffer-local-completion-map (kbd "C-p") 'minibuffer-previous-completion)
    (when (boundp 'completion-preview-mode)
      (completion-preview-mode 1)))

#+end_src

* Snippets
** Yasnippet
#+begin_src elisp
  (use-package yasnippet
    :ensure t
    :straight t
    :demand t
    :config
    (yas-reload-all)
    (yas-global-mode))
#+end_src

*** Source Code block
#+begin_src elisp :tangle snippets/org-mode/src
  # -*- mode: snippet -*-
  # name: source block
  # key: src
  # --
  ,#+begin_src ${1:Language}
  $0
  ,#+end_src
#+end_src

*** Template
#+begin_src elisp :tangle snippets/org-mode/temp
  # -*- mode: snippet -*-
  # name: template
  # key: temp
  # --
  ,#+TITLE: ${1:title}
  ,#+AUTHOR: ${2:author}
  ,#+DATE: `(format-time-string "%Y-%m-%d")`
  -----
#+end_src

*** Insert TODO heading with Priority and Tags
#+begin_src elisp :tangle snippets/org-mode/todo
  # -*- mode: snippet -*-
  # name: TODO entry
  # key: todo
  # --
  \* TODO [#${1:A}] ${2:Task description}       :${3:tags}:
  DEADLINE: <${4:yyyy-mm-dd}>
  $0
#+end_src

*** Insert Org table with caption
#+begin_src elisp :tangle snippets/org-mode/table
  # -*- mode: snippet -*-
  # name: table with caption
  # key: table
  # --
  |--------------+--------------|
  | ${1:Column1} | ${2:Column2} |
  |--------------+--------------|
  | ${4:Value1}  | ${5:Value2}  |
  |--------------+--------------|
  ,#+CAPTION: ${7:Table caption here}
  $0
#+end_src

** Programming
#+begin_src elisp
  (use-package treesit
    :ensure nil ; built-in
    :straight nil
    :custom
    (treesit-font-lock-level 4)  ; Maximum font-lock decoration
    :config
    ;; Configure treesit-language-source-alist for grammar installation
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (c "https://github.com/tree-sitter/tree-sitter-c")
            (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (java "https://github.com/tree-sitter/tree-sitter-java")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (lua "https://github.com/Azganoth/tree-sitter-lua")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (rust "https://github.com/tree-sitter/tree-sitter-rust")
            (sql "https://github.com/m-novikov/tree-sitter-sql")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

    ;; Auto-remap major modes to tree-sitter versions
    (setq major-mode-remap-alist
          '((bash-mode . bash-ts-mode)
            (c-mode . c-ts-mode)
            (c++-mode . c++-ts-mode)
            (css-mode . css-ts-mode)
            (go-mode . go-ts-mode)
            (java-mode . java-ts-mode)
            (js-mode . js-ts-mode)
            (javascript-mode . js-ts-mode)
            (json-mode . json-ts-mode)
            (python-mode . python-ts-mode)
            (rust-mode . rust-ts-mode)
            (typescript-mode . typescript-ts-mode))))

  ;; Treesit-auto for automatic grammar management
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)  ; Prompt before installing grammars
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))

  ;; ============================================================================
  ;; LSP-mode Configuration
  ;; ============================================================================

  (use-package lsp-mode
    :ensure t
    :hook ((prog-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :custom
    ;; Performance optimizations
    (lsp-completion-provider :none)          ; Use Corfu instead of company
    (lsp-idle-delay 0.5)                     ; Debounce timer for after-change-function
    (lsp-log-io nil)                         ; Disable for performance
    (lsp-keep-workspace-alive nil)           ; Close LSP server when buffers are closed
    (lsp-enable-file-watchers nil)           ; Disable file watchers for performance

    ;; UI and features
    (lsp-keymap-prefix "C-c l")              ; LSP command prefix
    (lsp-diagnostics-provider :flycheck)     ; Use flycheck for diagnostics
    (lsp-eldoc-enable-hover t)               ; Enable hover documentation
    (lsp-signature-render-documentation nil) ; Disable to reduce noise
    (lsp-signature-doc-lines 1)              ; Limit signature lines

    ;; Completion settings
    (lsp-completion-enable t)
    (lsp-completion-enable-additional-text-edit t)
    (lsp-enable-snippet t)
    (lsp-completion-show-kind t)

    ;; UI elements
    (lsp-headerline-breadcrumb-enable t)
    (lsp-headerline-breadcrumb-enable-diagnostics nil)
    (lsp-modeline-code-actions-enable nil)
    (lsp-modeline-diagnostics-enable nil)
    (lsp-modeline-workspace-status-enable t)

    ;; Semantic tokens (let tree-sitter handle syntax highlighting)
    (lsp-semantic-tokens-enable nil)
    (lsp-enable-symbol-highlighting t)
    (lsp-lens-enable nil)

    :init
    (setq lsp-use-plists t)  ; Performance improvement

    :config
    ;; Fix orderless completion with lsp-mode
    (add-hook 'lsp-completion-mode-hook
              (lambda ()
                (setq-local completion-category-defaults
                            (assoc-delete-all 'lsp-capf completion-category-defaults))))

    ;; Enhanced keybindings
    (define-key lsp-mode-map (kbd "C-c l r") 'lsp-rename)
    (define-key lsp-mode-map (kbd "C-c l a") 'lsp-execute-code-action)
    (define-key lsp-mode-map (kbd "C-c l f") 'lsp-format-buffer)
    (define-key lsp-mode-map (kbd "C-c l o") 'lsp-organize-imports)
    (define-key lsp-mode-map (kbd "C-c l d") 'lsp-find-declaration)
    (define-key lsp-mode-map (kbd "C-c l i") 'lsp-find-implementation)
    (define-key lsp-mode-map (kbd "C-c l t") 'lsp-find-type-definition)
    (define-key lsp-mode-map (kbd "C-c l s") 'lsp-signature-activate)
    (define-key lsp-mode-map (kbd "C-c l h") 'lsp-describe-thing-at-point))

  ;; LSP UI for additional features
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :custom
    ;; Documentation
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-show-with-cursor nil)        ; Don't show doc on cursor hover
    (lsp-ui-doc-show-with-mouse nil)         ; Don't show doc on mouse hover
    (lsp-ui-doc-position 'at-point)          ; Show doc at point
    (lsp-ui-doc-include-signature t)         ; Include signature in doc
    (lsp-ui-doc-max-width 120)
    (lsp-ui-doc-max-height 30)

    ;; Sideline
    (lsp-ui-sideline-enable t)
    (lsp-ui-sideline-show-hover nil)
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-diagnostic-max-lines 10)

    ;; Peek
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-always-show t)
    (lsp-ui-peek-peek-height 30)
    (lsp-ui-peek-list-width 50)

    ;; Imenu
    (lsp-ui-imenu-enable t)
    (lsp-ui-imenu-kind-position 'top)

    :bind (:map lsp-mode-map
                ("C-c C-d" . lsp-ui-doc-glance)
                ("C-c C-p" . lsp-ui-peek-find-definitions)
                ("C-c C-r" . lsp-ui-peek-find-references)
                ("C-c C-i" . lsp-ui-imenu)))

  ;; ============================================================================
  ;; Flycheck Configuration
  ;; ============================================================================

  (use-package flycheck
    :ensure t
    :hook (prog-mode . flycheck-mode)
    :custom
    (flycheck-display-errors-delay 0.3)
    (flycheck-idle-change-delay 1.0)
    (flycheck-indication-mode 'left-fringe)
    (flycheck-highlighting-mode 'symbols)
    (flycheck-check-syntax-automatically '(save mode-enabled))
    :config
    ;; Enhanced error navigation
    (define-key flycheck-mode-map (kbd "M-n") 'flycheck-next-error)
    (define-key flycheck-mode-map (kbd "M-p") 'flycheck-previous-error)
    (define-key flycheck-mode-map (kbd "C-c ! l") 'flycheck-list-errors)
    (define-key flycheck-mode-map (kbd "C-c ! v") 'flycheck-verify-setup)

    ;; Multiple checker support - example for TypeScript + ESLint
    (add-hook 'lsp-managed-mode-hook
              (lambda ()
                (when (derived-mode-p 'typescript-ts-mode 'js-ts-mode 'tsx-ts-mode)
                  (setq-local flycheck-local-cache
                             '((lsp . ((next-checkers . (javascript-eslint))))))))))

  ;; ============================================================================
  ;; Corfu - Modern Completion UI
  ;; ============================================================================

  (use-package corfu
    :ensure t
    :custom
    (corfu-auto t)                    ; Enable auto completion
    (corfu-auto-delay 0.2)            ; Faster auto completion
    (corfu-auto-prefix 2)             ; Minimum prefix length
    (corfu-cycle t)                   ; Enable cycling for corfu-next/previous
    (corfu-preselect 'prompt)         ; Preselect the prompt
    (corfu-on-exact-match nil)        ; Don't auto-complete on exact match
    (corfu-scroll-margin 5)           ; Use scroll margin
    (corfu-popupinfo-delay '(0.5 . 0.2)) ; Documentation popup timing
    :init
    (global-corfu-mode)
    :config
    ;; Enhanced keybindings
    (define-key corfu-map (kbd "TAB") 'corfu-next)
    (define-key corfu-map (kbd "S-TAB") 'corfu-previous)
    (define-key corfu-map (kbd "RET") 'corfu-insert)
    (define-key corfu-map (kbd "M-.") 'corfu-show-location)
    (define-key corfu-map (kbd "M-h") 'corfu-show-documentation)

    ;; Enable Corfu in minibuffer
    (defun corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer."
      (when (local-variable-p 'completion-at-point-functions)
        (setq-local corfu-auto nil)
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer))

  ;; Corfu Popupinfo for documentation
  (use-package corfu-popupinfo
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-popupinfo-hide nil))

  ;; ============================================================================
  ;; Cape - Completion At Point Extensions
  ;; ============================================================================

  (use-package cape
    :ensure t
    :init
    ;; Add useful completion sources
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    :config
    ;; Silence pcomplete
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)

    ;; Mode-specific configurations
    (add-hook 'eshell-mode-hook
              (lambda ()
                (setq-local completion-at-point-functions
                            (list #'cape-file #'pcomplete-completions-at-point))))

    (add-hook 'org-mode-hook
              (lambda ()
                (add-to-list 'completion-at-point-functions #'cape-dabbrev))))

  ;; ============================================================================
  ;; Kind-icon - Beautiful Icons for Completion
  ;; ============================================================================

  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default)
    (kind-icon-blend-background nil)
    (kind-icon-blend-frac 0.08)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)

    ;; Cache regeneration hooks
    (add-hook 'modus-themes-after-load-theme-hook #'kind-icon-reset-cache)
    (add-hook 'ef-themes-post-load-hook #'kind-icon-reset-cache))

  ;; ============================================================================
  ;; Enhanced Eldoc Configuration
  ;; ============================================================================

  (use-package eldoc
    :ensure nil ; built-in
    :custom
    (eldoc-echo-area-use-multiline-p 3)
    (eldoc-echo-area-display-truncation-message nil)
    (eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
    :config
    (add-hook 'prog-mode-hook #'eldoc-mode)

    ;; Better integration with lsp-mode
    (add-hook 'lsp-managed-mode-hook
              (lambda ()
                (setq eldoc-documentation-functions
                      (cons #'lsp-eldoc-function
                            (remove #'lsp-eldoc-function eldoc-documentation-functions))))))

  ;; ============================================================================
  ;; Orderless - Flexible Completion Style
  ;; ============================================================================

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    (orderless-matching-styles '(orderless-literal orderless-regexp orderless-flex)))

  ;; ============================================================================
  ;; Additional Development Enhancements
  ;; ============================================================================

  ;; Automatically install tree-sitter grammars
  (defun install-common-tree-sitter-grammars ()
    "Install commonly used tree-sitter grammars."
    (interactive)
    (dolist (lang '(bash c cpp css go html java javascript json lua python rust typescript tsx yaml))
      (when (treesit-language-available-p lang)
        (message "Grammar for %s already installed" lang))
      (unless (treesit-language-available-p lang)
        (message "Installing grammar for %s..." lang)
        (treesit-install-language-grammar lang))))

  ;; Improved indentation for tree-sitter modes
  (add-hook 'prog-mode-hook
            (lambda ()
              (when (and (fboundp 'treesit-parser-list)
                         (treesit-parser-list))
                (setq-local indent-tabs-mode nil)
                (setq-local tab-width 4))))

  ;; Global development keybindings
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x t g") 'install-common-tree-sitter-grammars)
  (global-set-key (kbd "C-x w r") 'treesit-install-language-grammar)
#+end_src
