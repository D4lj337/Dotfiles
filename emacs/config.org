#+TITLE: Emacs configuration.
#+DESCRIPTION: Emacs configuration is written in orgmode. Code is directly written to the files using org-babel-tangle without the need to start orgmode at startup.
#+PROPERTY: header-args:elisp :lexical t :tangle "init.el" :mkdirp "lisp"
#+STARTUP: showeverything

* Must Reads
1. [[https://discourse.doomemacs.org/t/common-config-anti-patterns/119][Common config anti-patters]]
2. [[https://discourse.doomemacs.org/t/common-errors-how-to-deal-with-them/58][Common errors & how to deal with them]]

* "My" tricks for <1s startup time (GUI Emacs on ~5 year old laptop):

Link:https://www.reddit.com/r/emacs/comments/lkfuk5/comment/gnk42ta/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button

Defer most packages using ***use-package*** (most important)

increase ***gc-cons-threshold*** during startup

use ***early-init.el*** to set graphical parameters and fonts

make sure scratch starts in fundamental-mode

avoid ***set-face-attributes***

avoid ***load-theme***

avoid ***require*** during startup

don't use ****:init** in use-package

use ***esup*** to find things that slow down startup

use ***package-quickstart***

unset ***file-name-handler-alist*** during startup

* Xresources
#+begin_src sh :tangle "~/.Xresources"
  Xft.autohint: 0
  Xft.lcdfilter: lcddefault
  Xft.hintstyle: hintslight
  Xft.hinting: 1
  Xft.antialias: 1 Xft.rgba: rgb
#+end_src

* Early-init
=Early-init= made for speed up Emacs.

#+BEGIN_SRC elisp :tangle "early-init.el"
  ;; early-init.el -*- lexical-binding: t; -*-

  ;; Disable "file-name-handler-alist" than enable it later for speed.
  (defvar startup/file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist startup/file-name-handler-alist)
              (makunbound 'startup/file-name-handler-alist)))

  ;; Speed up package loading 
  (setq package-quickstart t)

  ;; Loads packages only when needed
  (setq use-package-always-defer t)
#+END_SRC

** Disable menu and scrollbar
#+BEGIN_SRC elisp :tangle "early-init.el"
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (global-tab-line-mode -1) ; tab line
  (tab-bar-mode -1) ; tabs
  (global-visual-line-mode t) ; don't let the text to go horizontal.
  (global-hl-line-mode t) ; highlight the line you're on.
  (global-display-line-numbers-mode t) ; Slow down with big files.
  (electric-pair-mode t) ;; auto brackets.
  (electric-indent-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

** Fringe
#+begin_src elisp :tangle "early-init.el"
  (set-fringe-mode 0)
#+end_src

** Remeber last place you were in file.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (save-place-mode 1)
#+END_SRC

** Auto revert buffer for changed files.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (global-auto-revert-mode t)
#+END_SRC

** Auto revert dired buffer
#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq global-auto-revert-non-file-buffers t)
#+END_SRC

** Open Emacs in full screen always.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Preventing flickering.
#+begin_src elisp :tangle "early-init.el"
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+end_src

** Show parenthesis.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq show-paren-style 'expression)
  (show-paren-mode 1)
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-foreground 'show-paren-match "#def")
  (custom-set-faces
   '(show-paren-match ((t (:weight extra-bold)))))
#+END_SRC

** UTF
#+BEGIN_SRC elisp :tangle "early-init.el"
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq gc-cons-threshold (* 8 1024 1024))
#+END_SRC

* Major settings
#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq
   package-enable-at-startup nil ; don't auto-initialize!
   package-enable-imenu-support t
   package--init-file-ensured t ; don't add that `custom-set-variables' block to init
   package-archives nil
   load-prefer-newer t ; prefer newer package files.
   frame-resize-pixelwise t
   visible-bell 1 ; Alarm bell (flash the bar)

   ;; Tab behaviour
   completion-cycle-threshold 3 ;; TAB cycle if there are only few candidates
   tab-always-indent 'complete ;; Enable indentation+completion using the TAB key.
   tab-line-new-button-show nil
   echo-keystrokes 0.01 ;; decrease the echoing of the keystrokes.

   ;; Tab line
   tab-line-close-button-show nil
   tab-line-separator " "
   line-move-visual nil
   site-run-file nil ; unset SRF
   pixel-scroll-precision-mode t
   pixel-scroll-precision-use-momentum t
   scroll-conservatively 101 ;; scroll line by line.
   use-file-dialog nil
   mode-line-format nil ; don't want a mode line while loading init
   create-lockfiles nil ; disable lockfiles
   make-backup-files nil ; disable backup file
   backup-directory-alist '((".*" . "~/.local/share/Trash/files"))

   ;; Disable auto save alltogether.
   auto-save-list-file-prefix nil ; disable auto-save
   auto-save-default nil
   auto-save-mode nil
   delete-auto-save-files t ; delete auto save files

   auto-mode-case-fold nil ; use case-sensitive `auto-mode-alist' for performance
   default-input-method nil
   utf-translate-cjk-mode nil ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
   initial-scratch-message nil ; empty the initial *scratch* buffer.
   message-log-max nil
   command-line-x-option-alist nil ; remove irreleant command line options for faster startup
   use-short-answers t ; y/n for yes/no
   vc-follow-symlinks t ; Do not ask about symlink following
   use-dialog-box nil
   inhibit-default-init t
   use-file-dialog nil
   redisplay-dont-pause t ; improve display engine

   ;; Suppress the startup
   inhibit-splash-screen t
   inhibit-startup-screen t		; do not show the startup message
   inhibit-startup-message t      ; reduce noise at startup
   inhibit-startup-buffer-menu t  ; stop `list-buffers' from showing when opening multiple files

   fast-but-imprecise-scrolling t ; more performant rapid scrolling over unfontified regions
   frame-inhibit-implied-resize t ; do not resize the frame at this early stage
   ffap-machine-p-known 'reject   ; don't ping things that look like domain names
   inhibit-compacting-font-caches t ; Inhibit frame resizing for performance
   read-process-output-max (* 1024 1024) ; Increase how much is read from processes in a single chunk.
   redisplay-skip-fontification-on-input t ; Inhibits it for better scrolling performance.
   idle-update-delay 1.0 ; slow down UI updates down
   select-active-regions 'only ; Emacs hangs when large selections contain mixed line endings
   ad-redefinition-action 'accept ; disable warnings from legacy advice system
   initial-major-mode 'fundamental-mode
   confirm-kill-emacs 'y-or-n-p ; confirm before exiting emacs
   enable-local-variables :safe ; host security
   column-number-mode t
   org-indent-mode nil
   display-line-numbers-type 'relative
   custom-file (make-temp-file "emacs-custom-")
   enable-recursive-minibuffers t                ; Use the minibuffer whilst in the minibuffer
   completion-cycle-threshold 1                  ; TAB cycles candidates
   completions-detailed t                        ; Show annotations
   tab-always-indent 'complete                   ; When I hit TAB, try to complete, otherwise, indent
   completion-styles '(basic initials substring) ; Different styles to match input to candidates

   completion-auto-help 'always                  ; Open completion always; `lazy' another option
   completions-max-height 20                     ; This is arbitrary
   completions-detailed t
   completions-format 'one-column
   completions-group t
   completion-auto-select 'second-tab            ; Much more eager
   x-stretch-cursor nil


   hscroll-margin 2
   hscroll-step 1
   ;; Emacs spends too much effort recentering the screen if you scroll the
   ;; cursor more than N lines past window edges (where N is the settings of
   ;; `scroll-conservatively'). This is especially slow in larger files
   ;; during large-scale scrolling commands. If kept over 100, the window is
   ;; never automatically recentered. The default (0) triggers this too
   ;; aggressively, so I've set it to 10 to recenter if scrolling too far
   ;; off-screen.
   scroll-conservatively 10
   scroll-margin 0
   scroll-preserve-screen-position t
   ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
   ;; for tall lines.
   auto-window-vscroll nil
   ;; mouse
   mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
   mouse-wheel-scroll-amount-horizontal 2

   confirm-nonexistent-file-or-buffer nil

                                          ;  (setq-default isearch-lazy-count t)
   enable-recursive-minibuffers t
   kill-ring-max 100
   
   frame-title-format "E M A C S"

   browse-url-browser-function 'browse-url-xdg-open

   custom-safe-themes t

   ;; Prevent unwanted runtime builds; packages are compiled ahead-of-time when
   ;; they are installed and site files are compiled when gccemacs is installed.
   ;; (setq comp-deferred-compilation nil)
   native-comp-jit-compilation t

   native-comp-async-report-warnings-errors nil

   ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
   ;; compiled ahead-of-time when they are installed and site files are compiled
   ;; when gccemacs is installed.
   comp-deferred-compilation nil

   ;; Compile all sites-lisp on demand.
   native-comp-deferred-compilation t

   ;; Keep the eln cache clean.
   native-compile-prune-cache t

   ;; Solve slow icon rendering
   inhibit-compacting-font-caches t

   ;; Enable ibuffer
   ibuffer-expert t

   display-buffer-alist nil

   select-enable-clipboard t ;; Copy and Paste outside of Emacs
   )

  (defalias 'yes-or-no-p 'y-or-n-p) ; yes or no to y or n
  (add-hook 'prog-mode-hook 'display-line-numbers-mode) ; Only use line-numbers in major modes
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (windmove-default-keybindings)

  ;; Improve memory
  (setq-default history-length 1000)
  (setq-default prescient-history-length 1000)

#+END_SRC

** Fonts
#+BEGIN_SRC elisp :tangle "early-init.el"
  (custom-set-faces
   ;; Default font for all text
   '(default ((t (:font "JetBrains Mono:size=15"))))

   ;; Fringe background
   '(fringe ((t (:background "white"))))

   ;; Current line number
   '(line-number-current-line ((t (:foreground "yellow" :background nil :inherit line-number))))

   ;; Mode-line font and weight
   '(mode-line ((t (:font "Jetbrains Mono:size=15" :weight bold :background "black" :foreground "green"))))
   '(mode-line-active ((t (:font "JetBrains Mono:size=15" :weight bold :foreground "grey"))))

   ;; Comments italic, inherits font
   '(font-lock-comment-face ((t (:slant italic))))

   ;; All other syntax faces italic, no color
   '(font-lock-keyword-face ((t (:slant italic))))
   '(font-lock-function-name-face ((t (:slant italic))))
   '(font-lock-string-face ((t (:slant italic))))
   '(font-lock-variable-name-face ((t (:slant italic))))
   '(font-lock-constant-face ((t (:slant italic))))
   '(font-lock-type-face ((t (:slant italic))))
   '(font-lock-builtin-face ((t (:slant italic))))
   '(lsp-face-error ((t (:underline (:style wave :color "Red")))))
   '(lsp-face-warning ((t (:underline (:style wave :color "Orange")))))
   '(lsp-face-info ((t (:underline (:style wave :color "LightBlue")))))
   '(lsp-face-hint ((t (:underline (:style wave :color "Green"))))))
#+END_SRC

* Init

** Emacs
#+BEGIN_SRC elisp
  ;; init.el -*- lexical-binding: t; -*-
  ;; Global tab width and use spaces
  (use-package emacs 
    :ensure nil
    :defer t
    :config
    ;; Load theme
    ;;   (load-theme 'modus-vivendi)

    ;; Tab width
    (setq-default tab-width 4
                  indent-tabs-mode nil)
    (setq org-startup-indented nil))
#+END_SRC

** Maximum native eln speed.
Look for native-compile-async using variable "C-h v =native-comp-eln-load-path="
#+BEGIN_SRC elisp
  ;; init.el -*- lexical-binding: t; -*-
  (setq native-comp-speed 3)

  (native-compile-async "/usr/lib/emacs/30.2/native-lisp" 'recursively) (setq native-comp-compiler-options '("-march=znver3" "-Ofast" "-g0" "-fno-finite-math-only" "-fgraphite-identity" "-floop-nest-optimize" "-fdevirtualize-at-ltrans" "-fipa-pta" "-fno-semantic-interposition" "-flto=auto" "-fuse-linker-plugin"))

  (setq native-comp-driver-options '("-march=znver3" "-Ofast" "-g0" "-fno-finite-math-only" "-fgraphite-identity" "-floop-nest-optimize" "-fdevirtualize-at-ltrans" "-fipa-pta" "-fno-semantic-interposition" "-flto=auto" "-fuse-linker-plugin"))
#+END_SRC

** Autoload
#+begin_src elisp
  (use-package bionic-reading
    :load-path "lisp/"
    :commands (infu-bionic-reading-buffer))

  (use-package gdb
    :load-path "lisp/"
    :commands (gdb))

  (use-package feature
    :load-path "lisp/"
    :commands (my/protect-vital-buffers
               my/toggle-mode-line
               my/visit-init
               my/visit-qtile
               my/highlight-word
               my/kill-all-buffers
               my/split-and-follow-horizontally
               my/split-and-follow-vertically
               my/kill-whole-word
               my/copy-whole-line))
#+end_src

* Straight
#+BEGIN_SRC elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

* Use-package
#+BEGIN_SRC elisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			             ("org" . "https://orgmode.org/elpa/")
  			             ("elpa" . "https://elpa.gnu.org/packages/")))
#+END_SRC

* Welcome Screen
#+BEGIN_SRC elisp
  (defun show-welcome-screen-buffer ()
    "Show *Welcome-screen* buffer."
    (with-current-buffer (get-buffer-create "*Welcome-screen*")
      (setq truncate-lines t)
      (let* ((buffer-read-only)
             (image-path (expand-file-name "images/emacs-logo.png" user-emacs-directory))
             (image (create-image image-path))
             (size (image-size image))
             (height (cdr size))
             (width (car size))
             (top-margin (floor (/ (- (window-height) height) 2)))
             (left-margin (floor (/ (- (window-width) width) 2)))
             (prompt-title "E M A C S"))
        (erase-buffer)
        (setq mode-line-format nil) ;; Disable the modeline
        (setq elscreen-toggle-display-tab nil) ; hide elscreen
        (goto-char (point-min))
        (insert (make-string top-margin ?\n ))
        (insert (make-string left-margin ?\ ))
        (insert-image image)
        (insert "\n\n\n")
        (insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
        (insert prompt-title))
      (setq cursor-type nil)
      (read-only-mode +1)
      (switch-to-buffer (current-buffer))
      (local-set-key (kbd "q") 'kill-this-buffer)))

  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)

  (when (< (length command-line-args) 2)
    (add-hook 'emacs-startup-hook (lambda ()
    			                      (when (display-graphic-p)
    			                        (show-welcome-screen-buffer)))))
#+END_SRC

* Functions

** Visible bell
#+BEGIN_SRC elisp
  (setq visible-bell nil
        ring-bell-function 'double-flash-mode-line)
  (defun double-flash-mode-line ()
    (let ((flash-sec (/ 3.0 20)))
      (invert-face 'mode-line)
      (run-with-timer flash-sec nil #'invert-face 'mode-line)))

                                          ; Flash the foreground of the mode-line
                                          ;(setq ring-bell-function
                                          ;      (lambda ()
                                          ;        (let ((orig-fg (face-foreground 'mode-line)))
                                          ;          (set-face-foreground 'mode-line "#F2804F")
                                          ;          (run-with-idle-timer 0.1 nil
                                          ;                               (lambda (fg) (set-face-foreground 'mode-line fg))
                                          ;                               orig-fg))))
                                          ;(setq ring-bell-function
                                          ;      (lambda ()
                                          ;        (let ((orig-fg (face-foreground 'mode-line)))
                                          ;          (set-face-foreground 'mode-line "#F2804F")
                                          ;          (run-with-idle-timer 0.1 nil
                                          ;                               (lambda (fg) (set-face-foreground 'mode-line fg))
                                          ;                               orig-fg))))
#+END_SRC

** Disable line numbers, mode-line, tab-bar and etc.
#+BEGIN_SRC elisp
  (dolist (mode '(term-mode-hook
    	            shell-mode-hook
    	            treemacs-mode-hook
    	            dashboad-mode-hook
    	            neotree-mode-hook
    	            dashboard-mode-hook
    	            pdf-view-mode-hook
    	            vterm-mode-hook
    	            eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0) (setq mode-line-format nil) (tab-bar-mode 0) (tab-line-mode 0))))
#+END_SRC

* Keybindings
#+BEGIN_SRC elisp
  ;; Escape
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
                                          ;(global-set-key (kbd "<escape> <escape>") 'keyboard-escape-quit)

  ;; Visiting files
  (global-set-key (kbd "C-c e") 'my/visit-init) ; vist the config
  (global-set-key (kbd "C-c q") 'my/visit-qtile) ; vist the qtile config

  ;; Restart the Emacs
  (global-set-key (kbd "C-x r") 'restart-emacs) ; restart the Emacs.

  ;; Avoid accidentally minimizing emacs.
  (global-unset-key (kbd "C-z"))

  ;; Close all the buffers.
  (global-set-key (kbd "C-c k") 'my/kill-all-buffers)

  ;; Emacs
  (global-set-key (kbd "<f12>") 'my/toggle-mode-line) 

  ;; Buffers
                                          ;(global-set-key (kbd "C-x b") 'buffer-menu)    ; ibuffer
  (global-set-key (kbd "C-x C-k") 'kill-buffer)    ; kill buffer
                                          ;(global-set-key (kbd "C-x j") 'previous-buffer)    ; move to previous buffer
                                          ;(global-set-key (kbd "C-x k") 'next-buffer)    ; move to next buffer
  (global-set-key (kbd "C-c r") 'recentf)    ; open recent buffers
  (global-set-key (kbd "C-x 2") 'my/split-and-follow-horizontally) ;; move focus to new window.
  (global-set-key (kbd "C-x 3") 'my/split-and-follow-vertically) ;; move focust to new window.

  ;; File
                                          ;(global-set-key (kbd "C-c f") 'find-name-dired)
                                          ;(global-set-key (kbd "C-c s") 'find-lisp--)
  (global-set-key (kbd "C-c w w") 'my/kill-whole-word)
  (global-set-key (kbd "C-c w l") 'my/copy-whole-line)
  (global-set-key (kbd "C-c w h") 'my/highlight-word)
  (global-set-key (kbd "C-c v") 'view-mode)

  ;; Applications
  (global-set-key (kbd "C-c p") 'dmenu) ; dmenu
  (global-set-key (kbd "C-c T") 'vterm)      ; vterm
  (global-set-key (kbd "C-c t") 'vterm-toggle-cd) ; vterm-toggle to cd

  (global-set-key (kbd "C-x B") 'infu-bionic-reading-buffer) ; bionic reading
  (global-set-key (kbd "C-+") 'text-scale-increase) ; zoom in
  (global-set-key (kbd "C--") 'text-scale-decrease) ; zoom out
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-increase) ; zoom in with mouse
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-decrease) ; zoom out with mouse
  (global-set-key (kbd "C-c n") 'neotree-toggle)
  (global-set-key (kbd "C-.") 'avy-goto-char)
  (global-set-key (kbd "C-c c") 'compile)
  (global-set-key (kbd "C-c b") 'nyan-mode)
  (global-set-key (kbd "C-c C-u") 'package-upgrade-all)
  (global-set-key (kbd "C-c g") #'gdb)
  (global-set-key (kbd "M-y") #'popup-kill-ring)
                                          ; (global-set-key (kbd "C-x C-f") #'fzf-find-file)
                                          ; (global-set-key (kbd "C-x C-b") #'fzf-find-in-buffer)
#+END_SRC

* Zone
#+BEGIN_SRC elisp
                                          ;  (autoload 'zone-when-idle "zone" nil t)
                                          ;  (zone-when-idle 820) ; time after which zone run.
                                          ;  (setq zone-programs [zone-pgm-whack-chars])
#+END_SRC

* Dired
#+BEGIN_SRC elisp
  (use-package dired-open
    :ensure t
    :straight t
    :defer t
    :commands dired-open-by-extensions)
  (setq dired-open-extensions '(("jpg" . "eog")
    			                  ("png" . "eog")
    			                  ("pdf" . "zathura")
    			                  ("mkv" . "mpv")
    			                  ("mp3" . "mpv")
    			                  ("mpg" . "mpv")
    			                  ("epub" . "zathura")
    			                  ("mp4" . "mpv")))
#+END_SRC

* Icons
#+BEGIN_SRC elisp
  (use-package nerd-icons
    :ensure t
    :straight t
    :defer t)

  (use-package nerd-icons-dired
    :ensure t
    :straight t
    :defer t
    :hook (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-completion
    :ensure t
    :straight t
    :after (marginalia)
    :config
    (nerd-icons-completion-mode))
#+END_SRC

* Vertico 
#+BEGIN_SRC elisp
  (use-package vertico
    :ensure t
    :straight t
    :defer t
    :hook
    (after-init . vertico-mode)           ;; Enable vertico after Emacs has initialized.
    :custom
    (vertico-count 10)                    ;; Number of candidates to display in the completion list.
    (vertico-resize nil)                  ;; Disable resizing of the vertico minibuffer.
    (vertico-cycle nil)                   ;; Do not cycle through candidates when reaching the end of the list
    :config
    ;; Customize the display of the current candidate in the completion list.
    ;; This will prefix the current candidate with “» ” to make it stand out.
    ;; Reference: https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    (advice-add #'vertico--format-candidate :around
                (lambda (orig cand prefix suffix index _start)
                  (setq cand (funcall orig cand prefix suffix index _start))
                  (concat
                   (if (= vertico--index index)
                       (propertize "» " 'face '(:foreground "#80adf0" :weight bold))
                     "  ")
                   cand))))
#+END_SRC

* Orderless
#+BEGIN_SRC elisp
  (use-package orderless
    :ensure t
    :straight t
    :defer t                                    ;; Load Orderless on demand.
    :after vertico                              ;; Ensure Vertico is loaded before Orderless.
    :config
    (setq completion-styles '(orderless basic)  ;; Set the completion styles.
          completion-category-defaults nil      ;; Clear default category settings.
          completion-category-overrides '((file (styles partial-completion))))) ;; Customize file completion styles.
#+END_SRC

* Marginalia
#+BEGIN_SRC elisp
  ;; Marginalia enhances the completion experience in Emacs by adding
  ;; additional context to the completion candidates. This includes
  ;; helpful annotations such as documentation and other relevant
  ;; information, making it easier to choose the right option.
  (use-package marginalia
    :ensure t
    :straight t
    :hook
    (after-init . marginalia-mode))
#+END_SRC

* Consult
#+BEGIN_SRC elisp
  ;; Consult provides powerful completion and narrowing commands for Emacs.
  ;; It integrates well with other completion frameworks like Vertico, enabling
  ;; features like previews and enhanced register management. It's useful for
  ;; navigating buffers, files, and xrefs with ease.
  (use-package consult
    :ensure t
    :straight t
    :defer t
    :config
    ;; Enhance register preview with thin lines and no mode line.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult for xref locations with a preview feature.
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref))
#+END_SRC

* Embark
#+BEGIN_SRC elisp
  ;; Embark provides a powerful contextual action menu for Emacs, allowing
  ;; you to perform various operations on completion candidates and other items.
  ;; It extends the capabilities of completion frameworks by offering direct
  ;; actions on the candidates.
  ;; Just `<leader> .' over any text, explore it :)
  (use-package embark
    :ensure t
    :straight t
    :defer t)
#+END_SRC

* Embark consult
#+BEGIN_SRC elisp
  ;; Embark-Consult provides a bridge between Embark and Consult, ensuring
  ;; that Consult commands, like previews, are available when using Embark.
  (use-package embark-consult
    :ensure t
    :straight t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode)) ;; Enable preview in Embark collect mode.
#+END_SRC

* Vterm & vterm-toggle
#+BEGIN_SRC elisp
  (use-package vterm
    :ensure t
    :straight t
    :defer t
    :commands (vterm))

  (use-package vterm-toggle
    :ensure t
    :straight t
    :defer t
    :commands (vterm-toggle))
#+END_SRC

* Which key
#+BEGIN_SRC elisp
  (use-package which-key
    :ensure t
    :straight t
    :defer t
    :hook (after-init . which-key-mode)
    :custom
    (which-key-lighter "")
                                          ;  (which-key-sort-order #'which-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    (which-key-compute-remaps t)
    (which-key-side-window-slot -10)
    (which-key-separator " -> ")
    (which-key-allow-evil-operators t)
    (which-key-use-C-h-commands t)
    (which-key-show-remaining-keys t)
    (which-key-show-prefix 'bottom)
    :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    (which-key-setup-minibuffer))
#+END_SRC

* COMMENT Nyan
#+BEGIN_SRC elisp
  (use-package nyan-mode
    :straight t
    :defer 2
    :config
    (nyan-mode)
    :custom
    (nyan-animate-nyancat t)
    (autoload 'nyan-mode "nyan-mode" "Nyan Mode" t)
    (nyan-bar-length 22)
    (nyan-animation-frame-interval )
    (nyan-minimum-window-width 8)
    (nyan-wavy-trail t)
    (nyan-cat-face-number 3))
#+END_SRC

* Persistent history.
#+BEGIN_SRC elisp
  (use-package savehist
    :straight nil
    :defer 1
    :config
    (setq history-length 15)
    (savehist-mode 1))
#+END_SRC

* A few more useful configurations...
#+BEGIN_SRC elisp
  (use-package emacs
    :defer t
    :config
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
    	              (replace-regexp-in-string
    	               "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
    	               crm-separator)
    	              (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+END_SRC

* Company
#+BEGIN_SRC elisp
  (use-package company
    :ensure t
    :straight t
    :defer t
    :hook ((prog-mode text-mode) . company-mode)
    :config
    (setq company-idle-delay 0.1) ;; company-idle-delay set to low causes latency while typing use with caution.
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
    #+END_SRC

* Flycheck
#+BEGIN_SRC elisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC


* Org 
#+BEGIN_SRC elisp
  ;; Org mode, if you still want it for notes/tasks
  (use-package org
    :straight t
    :defer t
    :config
    (setq org-agenda-files '("~/Documents/org/")
          org-log-done 'time
          org-hide-emphasis-markers t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (C . t))))
#+END_SRC

* Lsp
#+BEGIN_SRC elisp
  (use-package lsp-mode
    :ensure t
    :straight t
    :defer t
    :hook (;; Replace XXX-mode with concrete major mode (e.g. python-mode)
           (lsp-mode . lsp-enable-which-key-integration)  ;; Integrate with Which Key
           ((js-mode                                      ;; Enable LSP for JavaScript
             tsx-ts-mode                                  ;; Enable LSP for TSX
             typescript-ts-base-mode                      ;; Enable LSP for TypeScript
             css-mode                                     ;; Enable LSP for CSS
             go-ts-mode                                   ;; Enable LSP for Go
             js-ts-mode                                   ;; Enable LSP for JavaScript (TS mode)
             prisma-mode                                  ;; Enable LSP for Prisma
             python-base-mode                             ;; Enable LSP for Python
             c-mode
             ruby-base-mode                               ;; Enable LSP for Ruby
             rust-ts-mode                                 ;; Enable LSP for Rust
  		   c-mode
             c++-mode
             js-mode
             bash-mode
             lua-mode
             web-mode) . lsp-deferred))                   ;; Enable LSP for Web (HTML)
    :commands lsp
    :custom
    (lsp-keymap-prefix "C-c l")                           ;; Set the prefix for LSP commands.
    (lsp-inlay-hint-enable nil)                           ;; Usage of inlay hints.
    (lsp-completion-provider :none)                       ;; Disable the default completion provider.
    (lsp-session-file (locate-user-emacs-file ".lsp-session")) ;; Specify session file location.
    (lsp-log-io nil)                                      ;; Disable IO logging for speed.
    (lsp-idle-delay 0.5)                                  ;; Set the delay for LSP to 0 (debouncing).
    (lsp-keep-workspace-alive nil)                        ;; Disable keeping the workspace alive.
    ;; Core settings
    (lsp-enable-xref t)                                   ;; Enable cross-references.
    (lsp-auto-configure t)                                ;; Automatically configure LSP.
    (lsp-enable-links nil)                                ;; Disable links.
    (lsp-eldoc-enable-hover t)                            ;; Enable ElDoc hover.
    (lsp-enable-file-watchers nil)                        ;; Disable file watchers.
    (lsp-enable-folding nil)                              ;; Disable folding.
    (lsp-enable-imenu t)                                  ;; Enable Imenu support.
    (lsp-enable-indentation nil)                          ;; Disable indentation.
    (lsp-enable-on-type-formatting nil)                   ;; Disable on-type formatting.
    (lsp-enable-suggest-server-download t)                ;; Enable server download suggestion.
    (lsp-enable-symbol-highlighting t)                    ;; Enable symbol highlighting.
    (lsp-enable-text-document-color t)                    ;; Enable text document color.
    ;; Modeline settings
    (lsp-modeline-code-actions-enable nil)                ;; Keep modeline clean.
    (lsp-modeline-diagnostics-enable nil)                 ;; Use `flymake' instead.
    (lsp-modeline-workspace-status-enable t)              ;; Display "LSP" in the modeline when enabled.
    (lsp-signature-doc-lines 1)                           ;; Limit echo area to one line.
    (lsp-eldoc-render-all t)                              ;; Render all ElDoc messages.
    ;; Completion settings
    (lsp-completion-enable t)                             ;; Enable completion.
    (lsp-completion-enable-additional-text-edit t)        ;; Enable additional text edits for completions.
    (lsp-enable-snippet nil)                              ;; Disable snippets
    (lsp-completion-show-kind t)                          ;; Show kind in completions.
    ;; Lens settings
    (lsp-lens-enable t)                                   ;; Enable lens support.
    ;; Headerline settings
    (lsp-headerline-breadcrumb-enable-symbol-numbers t)   ;; Enable symbol numbers in the headerline.
    (lsp-headerline-arrow "▶")                            ;; Set arrow for headerline.
    (lsp-headerline-breadcrumb-enable-diagnostics nil)    ;; Disable diagnostics in headerline.
    (lsp-headerline-breadcrumb-icons-enable nil)          ;; Disable icons in breadcrumb.
    ;; Semantic settings
    (lsp-semantic-tokens-enable nil))                     ;; Disable semantic tokens.

  ;; LSP UI for inline and doc popups
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :config
    (setq lsp-ui-sideline-enable t
          lsp-ui-doc-enable t
          lsp-ui-doc-header t
          lsp-ui-doc-include-signature t
          lsp-ui-doc-border (face-foreground 'default)
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-delay 0.05))
#+END_SRC

* Tree sitter
#+BEGIN_SRC elisp
  (use-package tree-sitter
    :ensure t
    :straight t
    :hook ((python-mode c-mode c++-mode lua-mode sh-mode asm-mode
                        go-mode rust-mode js-mode typescript-mode
                        json-mode yaml-mode bash-mode html-mode)
           . tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :ensure t
    :straight t)

  (add-hook 'python-ts-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'c-ts-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'c++-ts-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'lua-ts-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'bash-ts-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'asm-ts-mode-hook #'tree-sitter-hl-mode)
#+END_SRC

* Tree sitter font settings
#+BEGIN_SRC elisp
  (setq treesit-font-lock-level 4)

  ;; Example for Python (similar rules can be applied for C, C++, Lua)
  (add-hook 'python-ts-mode-hook
            (lambda ()
              (setq-local treesit-font-lock-settings
                          (append treesit-font-lock-settings my/python-treesit-settings))))
  (defun my/custom-c-ts-highlight ()
    (add-to-list 'treesit-font-lock-settings
                 (car (treesit-font-lock-rules
                       :language 'c
                       :feature 'custom
                       :override t
                       '(( "assert" @font-lock-keyword-face )
                         (call_expression function: (identifier) @font-lock-function-name-face))))))
  (add-hook 'c-ts-mode-hook #'my/custom-c-ts-highlight)

  (setq-local treesit-font-lock-feature-list
              '((comment)
                (constant variable)
                (keyword function)
                (type operator delimiter)))
#+END_SRC

* Evil mode
#+BEGIN_SRC elisp
  (use-package evil
    :ensure t
    :straight t
    :defer t
    :hook (after-init . evil-mode)
    :config
    (setq evil-want-integration t
        	evil-want-keybinding nil
        	evil-want-C-u-scroll t ; scrolling using p and n without holding ctrl.
        	evil-want-C-u-delete t 
        	evil-vspli-window-right t
        	evil-split-window-below t)
    (evil-set-initial-state 'dired-mode 'normal) ;evil-mode in dired.
    ;; Set SPC as the leader key
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-set-leader 'visual (kbd "SPC"))

    ;; Files
    (evil-define-key 'normal 'global (kbd "<leader> f") 'find-file)
    (evil-define-key 'normal 'global (kbd "<leader> d") 'dired)
    (evil-define-key 'normal 'global (kbd "<leader> pv") 'dired-jump)
    (evil-define-key 'normal 'global (kbd "<leader> c") 'compile)
    (evil-define-key 'normal 'global (kbd "<leader> w") 'save-buffer)
    (evil-define-key 'normal 'global (kbd "<leader> q") 'evil-quit)
    (evil-define-key 'normal 'global (kbd "<leader> r") 'restart-emacs)
    (evil-define-key 'normal 'global (kbd "<leader> b b") 'ibuffer)
    (evil-define-key 'normal 'global (kbd "<leader> b") 'switch-to-buffer)
                                          ;        (evil-define-key 'normal 'global (kbd "<leader> k") 'kill-current-buffer)
    (evil-define-key 'normal 'global (kbd "<leader> u") 'undo)
    (evil-define-key 'normal 'global (kbd "<leader> z") 'undo-redo)
    (evil-define-key 'normal 'global (kbd "<leader> g U") 'evil-upcase)

    ;; Orgmode
    (evil-define-key 'normal 'global (kbd "<leader> SPC") 'org-babel-tangle)

    (evil-define-key 'normal 'global (kbd "<leader> t") 'vterm-toggle-cd)

    ;; Windows
    (evil-define-key 'normal 'global (kbd "<leader> o") 'other-window)
    (evil-define-key 'normal 'global (kbd "<leader> k") 'kill-buffer)
    )
#+END_SRC

** Evil collection
#+BEGIN_SRC elisp
  (use-package evil-collection
    :ensure t
    :straight t
    :defer t
    :after (evil)
    :config
    (evil-collection-init))
#+END_SRC

** Evil tutor
#+BEGIN_SRC elisp
  (use-package evil-tutor
    :ensure t
    :straight t
    :defer t
    :commands (evil-tutor))
#+END_SRC

* Programming languages
#+BEGIN_SRC elisp
  (use-package python            ;; Python-specific tweaks
    :straight nil
    :defer t
    :hook (python-mode . lsp))

  (use-package cc-mode           ;; C/C++ tweaks
    :straight nil
    :defer t
    :hook (c-mode-common . lsp))

  (use-package js                ;; JS tweaks
    :straight nil
    :defer t
    :hook (js-mode . lsp))

  (use-package sh-script         ;; Shell scripts
    :straight nil
    :defer t
    :config
    (add-hook 'sh-mode-hook (lambda ()
                              (setq sh-basic-offset 4 sh-indentation 4))))

  (use-package lua-mode
    :straight t
    :defer t
    :mode ("\\.lua\\'" . lua-mode)
    :config
    (setq lua-indent-string-contents t)
    (setq lua-indent-close-paren-align t))

  (use-package asm-mode
    :straight t
    :defer t
    :mode ("\\.\\(asm\\|s\\|S\\)$" . asm-mode)
    :hook (asm-mode . (lambda ()
                        ;; your asm-mode customizations here
                        ))
    :config
    ;; extra configuration for asm-mode (does NOT activate it everywhere)
    )
#+END_SRC

* Bionic Reading
#+BEGIN_SRC elisp :tangle "lisp/bionic-reading.el"
  ;; -*- lexical-binding: t; -*-
  (defvar infu-bionic-reading-face nil "a face for `infu-bionic-reading-region'.")

  (setq infu-bionic-reading-face 'bold)
  ;; try
  ;; 'bold
  ;; 'error
  ;; 'warning
  ;; 'highlight
  ;; or any value of M-x list-faces-display

  (defun infu-bionic-reading-buffer ()
    "Bold the first few chars of every word in current buffer.
    Version 2022-05-21"
    (interactive)
    (infu-bionic-reading-region (point-min) (point-max)))

  (defun infu-bionic-reading-region (Begin End)
    "Bold the first few chars of every word in region.
    Version 2022-05-21"
    (interactive "r")
    (let (xBounds xWordBegin xWordEnd  )
      (save-restriction
  	  (narrow-to-region Begin End)
  	  (goto-char (point-min))
  	  (while (forward-word)
  	    ;; bold the first half of the word to the left of cursor
  	    (setq xBounds (bounds-of-thing-at-point 'word))
  	    (setq xWordBegin (car xBounds))
  	    (setq xWordEnd (cdr xBounds))
  	    (setq xBoldEndPos (+ xWordBegin (1+ (/ (- xWordEnd xWordBegin) 2))))
  	    (put-text-property xWordBegin xBoldEndPos
  			               'font-lock-face infu-bionic-reading-face)))))

  (provide 'bionic-reading)
#+END_SRC

* GDB
#+BEGIN_SRC elisp :tangle "lisp/gdb.el"
  ;; -*- lexical-binding: t; -*-
  (setq gdb-many-windows nil)

  (defun set-gdb-layout(&optional c-buffer)
    (if (not c-buffer)
  	  (setq c-buffer (window-buffer (selected-window)))) ;; save current buffer

    ;; from http://stackoverflow.com/q/39762833/846686
    (set-window-dedicated-p (selected-window) nil) ;; unset dedicate state if needed
    (switch-to-buffer gud-comint-buffer)
    (delete-other-windows) ;; clean all

    (let* (
  	     (w-source (selected-window)) ;; left top
  	     (w-gdb (split-window w-source nil 'right)) ;; right bottom
  	     (w-locals (split-window w-gdb nil 'above)) ;; right middle bottom
  	     (w-stack (split-window w-locals nil 'above)) ;; right middle top
  	     (w-breakpoints (split-window w-stack nil 'above)) ;; right top
  	     (w-io (split-window w-source (floor(* 0.9 (window-body-height)))
  			                 'below)) ;; left bottom
  	     )
      (set-window-buffer w-io (gdb-get-buffer-create 'gdb-inferior-io))
      (set-window-dedicated-p w-io t)
      (set-window-buffer w-breakpoints (gdb-get-buffer-create 'gdb-breakpoints-buffer))
      (set-window-dedicated-p w-breakpoints t)
      (set-window-buffer w-locals (gdb-get-buffer-create 'gdb-locals-buffer))
      (set-window-dedicated-p w-locals t)
      (set-window-buffer w-stack (gdb-get-buffer-create 'gdb-stack-buffer))
      (set-window-dedicated-p w-stack t)

      (set-window-buffer w-gdb gud-comint-buffer)

      (select-window w-source)
      (set-window-buffer w-source c-buffer)
      ))
  (defadvice gdb (around args activate)
    "Change the way to gdb works."
    (setq global-config-editing (current-window-configuration)) ;; to restore: (set-window-configuration c-editing)
    (let (
  	    (c-buffer (window-buffer (selected-window))) ;; save current buffer
  	    )
      ad-do-it
      (set-gdb-layout c-buffer))
    )
  (defadvice gdb-reset (around args activate)
    "Change the way to gdb exit."
    ad-do-it
    (set-window-configuration global-config-editing))

  (provide 'gdb)
#+END_SRC

* Features

** Don't let the specified get killed.
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  ;; -*- lexical-binding: t; -*-
  (defun my/protect-vital-buffers ()
    "Prevent killing vital buffers."
    (not (member (buffer-name) '("*Welcome-screen*"))))
  (message "I'm Immortal")
  (add-hook 'kill-buffer-query-functions #'my/protect-vital-buffers)
#+END_SRC

** Toggle modeline
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  (defun my/toggle-mode-line ()
    "Toggles the modeline on and off."
    (interactive) 
    (setq mode-line-format
          (if (equal mode-line-format nil)
              (default-value 'mode-line-format)) )
    (redraw-display))
  (global-set-key [M-f12] 'toggle-mode-line) 
#+end_src

** Visit the config.
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  (defun my/visit-init ()
    "Open the Emacs init file."
    (interactive)
    (message "Opening Emacs Init")
    (find-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

** Visit the qtile config.
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  (defun my/visit-qtile ()
    "Open the qtile cofnig file."
    (interactive)
    (message "Opening Qtile Configuration")
    (find-file "~/.config/qtile/config.py"))
#+END_SRC

** Highlight the word.
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  (defun my/highlight-word ()
    "Highlight the current word you are on."
    (interactive)
    (message "Highlighting word")
    (backward-word 1)
    (set-mark-command nil)
    (forward-word 1))
#+END_SRC

** Close all buffers
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  (defun my/kill-all-buffers ()
    "Kill all the buffers."
    (interactive)
    (message "Killed all buffers")
    (mapc 'kill-buffer (buffer-list)))
#+end_src

** Switch cursor automatically to new window.
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  (defun my/split-and-follow-horizontally ()
    "Split horziontally and follow."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun my/split-and-follow-vertically ()
    "Split vertically and follow."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC

** Kill the whole word
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  (defun my/kill-whole-word ()
    "kill the whole word."
    (interactive)
    (message "Killed whole word")
    (backward-word)
    (kill-word 1))
#+END_SRC

** Copy the whole line
#+BEGIN_SRC elisp :tangle "lisp/feature.el"
  (defun my/copy-whole-line ()
    "Copy whole line."
    (interactive)
    (message "Copied whole line")
    (save-excursion
      (kill-new
       (buffer-substring
        (pos-bol)
        (pos-eol)))))
#+END_SRC

** Keep this at the bottom of the feature file.
#+begin_src elsip :tangle "lisp/feature.el"
  (provide 'feature)
#+end_src

* Code compilation
#+BEGIN_SRC elisp
  (defun compile-and-run-current-file ()
    "Compile or run the current file depending on its extension."
    (interactive)
    (let* ((file (buffer-file-name))
           (ext (file-name-extension file))
           (cmd
            (cond
             ((member ext '("c"))
              (format "gcc '%s' -o /tmp/a.out && /tmp/a.out" file))
             ((member ext '("asm" "s"))

              (format "nasm -f elf64 %s -o /tmp/a.o && ld /tmp/a.o -o /tmp/a.out && /tmp/a.out" file))
             ((member ext '("py"))
              (format "python3 %s" file))
             ((member ext '("lua"))
              (format "lua %s" file))
             (t (format "chmod +x %s && %s" file file)))))
      (compilation-start cmd)))

  (add-to-list 'display-buffer-alist
               '("\\*compilation\\*"
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 (window-height . 0.25)))

  (global-set-key (kbd "C-c r") 'compile-and-run-current-file)
#+END_SRC

* Hardtime
#+BEGIN_SRC elisp
  (use-package hardtime
    :ensure t
    :straight t
    :disabled t
    :defer t
    :config
    (defun evil-hardtime-check-command ()
      "Return non-nil if the currently executed command should be checked."
      (memq this-command '( next-line previous-line evil-previous-visual-line
                            right-char left-char left-word right-word
                            evil-forward-char evil-backward-char
                            evil-next-line evil-previous-line)))
    :custom
    (hardtime-predicate #'evil-hardtime-check-command)
    :hook
    (text-mode . hardtime-mode)
    (prog-mode . hardtime-mode))
#+END_SRC

* COMMENT Meow
#+BEGIN_SRC elisp
  (use-package meow 
    :ensure t
    :straight t
    :defer t)

  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  (require 'meow)
  (meow-setup)
  (meow-global-mode 1)
#+END_SRC

* Catppuccin
#+BEGIN_SRC elisp
    (use-package catppuccin-theme
      :ensure t
      :straight t
      :init
      (load-theme 'catppuccin :no-confirm)
      :config
      (setq catppuccin-flavor 'mocha)
      (catppuccin-set-color 'base "#000000")
      (catppuccin-set-color 'mantle "#000000" 'mocha)
      (catppuccin-set-color 'crust "#000000" 'mocha)
      (catppuccin-reload))
#+END_SRC

