#+TITLE: Emacs configuration.
#+DESCRIPTION: Emacs configuration is written in orgmode. Code is directly written to the files using org-babel-tangle without the need to start orgmode at startup.
#+PROPERTY: header-args:elisp :lexical t :tangle "init.el"
#+STARTUP: overview

* Xresources
#+begin_src sh :tangle "~/.Xresources"
Emacs.font: JetBrainsMono Nerd Font Mono-10

  Xft.autohint: 0
  Xft.lcdfilter: lcddefault
  Xft.hintstyle: hintslight
  Xft.hinting: 1
  Xft.antialias: 1
  Xft.rgba: rgb
#+end_src

* Early-init
=Early-init= made for speed up Emacs.

#+BEGIN_SRC elisp :tangle "early-init.el"
  ;; -*- lexical-binding: t;-*-
; https://github.com/hlissner/doom-emacs/blob/58af4aef56469f3f495129b4e7d947553f420fca/core/core.el#L200
  (unless (daemonp)
    (advice-add #'display-startup-echo-area-message :override #'ignore))
#+END_SRC

** Disable menu and scrollbar
#+BEGIN_SRC elisp :tangle "early-init.el"
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (set-fringe-mode -1)
  (global-tab-line-mode -1) ; tab line
  (tab-bar-mode -1) ; tabs
  (global-visual-line-mode t) ; don't let the text to go horizontal.
  (global-hl-line-mode t) ; highlight the line you're on.
  (global-display-line-numbers-mode t) ; global display line numbers.
  (electric-pair-mode t) ;; auto brackets.
#+END_SRC

** Remeber last place you were in file.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (save-place-mode 1)
#+END_SRC

** Auto revert buffer for changed files.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (global-auto-revert-mode t)
#+END_SRC

** Auto revert dired buffer
#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq global-auto-revert-non-file-buffers t)
#+END_SRC

** Open Emacs in full screen always.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Show parenthesis.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq show-paren-style 'expression)
  (show-paren-mode 1)
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-foreground 'show-paren-match "#def")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+END_SRC

** Reduce fanfare
#+BEGIN_SRC elisp :tangle "early-init.el"
  ;; TODO See https://yrh.dev/blog/rant-obfuscation-in-emacs/
  (setq inhibit-startup-echo-area-message "angrybacon")
#+END_SRC

#+BEGIN_SRC elisp :tangle "early-init.el"
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (setq gc-cons-threshold (expt 2 32)) ; you can remove it
#+END_SRC

** Garbage collection
#+BEGIN_SRC elisp :tangle "early-init.el"
  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
	gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold 16777216 ; 16mb
		    gc-cons-percentage 0.1)))

  (setq safe-local-variable-values
	'((org-src-preserve-indentation . t)
	  (eval add-hook 'after-save-hook
		'(lambda nil
		   (org-babel-tangle))
		nil t)))
#+END_SRC

#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq
   package-enable-at-startup nil ; don't auto-initialize!
   package-enable-imenu-support t
   package--init-file-ensured t ; don't add that `custom-set-variables' block to init
   package-quickstart nil ; prevent `package.el' loading packages prior to their init-file
   package-archives nil
   load-prefer-newer t ; prefer newer package files.
   frame-resize-pixelwise t
   visible-bell 1 ; Alarm bell (flash the bar)
					  ;    indent-tabs-mode t
   tab-width 4

   ;; Tab behaviour
   completion-cycle-threshold 3 ;; TAB cycle if there are only few candidates
   tab-always-indent 'complete ;; Enable indentation+completion using the TAB key.
   tab-line-new-button-show nil
   echo-keystrokes 0.01 ;; decrease the echoing of the keystrokes.

   ;; Tab line
   tab-line-close-button-show nil
   tab-line-separator " "
   line-move-visual nil
   site-run-file nil ; unset SRF
   file-name-handler-alist nil
   pixel-scroll-precision-mode t
   pixel-scroll-precision-use-momentum t
   scroll-conservatively 101 ;; scroll line by line.
   use-file-dialog nil
   mode-line-format nil ; don't want a mode line while loading init
   create-lockfiles nil ; disable lockfiles
   make-backup-files nil ; disable backup file
   backup-directory-alist '((".*" . "~/.local/share/Trash/files"))
   auto-save-list-file-prefix nil ; disable auto-save
   auto-save-default nil
   auto-save-mode nil
   delete-auto-save-files t ; delete auto save files
   auto-mode-case-fold nil ; use case-sensitive `auto-mode-alist' for performance
   default-input-method nil
   utf-translate-cjk-mode nil ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
   initial-scratch-message nil ; empty the initial *scratch* buffer.
   message-log-max nil
   command-line-x-option-alist nil ; remove irreleant command line options for faster startup
   use-short-answers t ; y/n for yes/no
   vc-follow-symlinks t ; Do not ask about symlink following
   use-dialog-box nil
   inhibit-default-init t
   use-file-dialog nil
   redisplay-dont-pause t ; improve display engine
   inhibit-splash-screen t
   inhibit-startup-screen t		; do not show the startup message
   inhibit-startup-message t      ; reduce noise at startup
   inhibit-startup-buffer-menu t  ; stop `list-buffers' from showing when opening multiple files
   fast-but-imprecise-scrolling t ; more performant rapid scrolling over unfontified regions
   frame-inhibit-implied-resize t ; do not resize the frame at this early stage
   ffap-machine-p-known 'reject   ; don't ping things that look like domain names
   inhibit-compacting-font-caches t ; Inhibit frame resizing for performance
   read-process-output-max (* 1024 1024) ; Increase how much is read from processes in a single chunk.
   redisplay-skip-fontification-on-input t ; Inhibits it for better scrolling performance.
   idle-update-delay 1.0 ; slow down UI updates down
   select-active-regions 'only ; Emacs hangs when large selections contain mixed line endings
   ad-redefinition-action 'accept ; disable warnings from legacy advice system
   initial-major-mode 'fundamental-mode
   inhibit-startup-echo-area-message (user-login-name)
   auto-save-default t ;; autosave
   confirm-kill-emacs 'y-or-n-p ; confirm before exiting emacs
   enable-local-variables :safe ; host security
   column-number-mode t
   global-display-line-number-mode 1
   display-line-numbers-type 'relative)

  ;; Prevent unwanted runtime builds; packages are compiled ahead-of-time when
  ;; they are installed and site files are compiled when gccemacs is installed.
  ;; (setq comp-deferred-compilation nil)
  (setq native-comp-jit-compilation t)
  ;; Suppress warnings and errors during asynchronous native compilation

  (setq native-comp-async-report-warnings-errors nil)

  ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
  ;; compiled ahead-of-time when they are installed and site files are compiled
  ;; when gccemacs is installed.
  (setq comp-deferred-compilation nil)

  ;; Compile all sites-lisp on demand.
  (setq native-comp-deferred-compilation t)

  ;; Keep the eln cache clean.
  (setq native-compile-prune-cache t)

  (defalias 'yes-or-no-p 'y-or-n-p) ; yes or no to y or n
  (add-hook 'prog-mode-hook 'display-line-numbers-mode) ; Only use line-numbers in major modes
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (setq select-enable-clipboard t) ;; Copy and Paste outside of Emacs
  (windmove-default-keybindings)

					  ; Solve slow icon rendering
  (setq inhibit-compacting-font-caches t)

  ;; Enable ibuffer
  (setq ibuffer-expert t)

  (setq display-buffer-alist nil)

  ;; Improve memory
  (setq-default history-length 1000)
  (setq-default prescient-history-length 1000)

  (setq gc-cons-threshold most-positive-fixnum)

  ;; Do not steal focus while doing asynccompilations.
  (setq warning-suppress-types '((comp)))

  (setq comp-deferred-compilation t)

  (defvar startup/file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (defun startup/revert-file-name-handler-alist ()
    (setq file-name-handler-alist startup/file-name-handler-alist))

  (add-hook 'emacs-startup-hook 'startup/revert-file-name-handler-alist)
#+END_SRC

** Making native compilation silent.
#+BEGIN_SRC elisp :tangle "early-init.el"
  (when (native-comp-available-p)
    (setq native-comp-prune-cache t))

  (when (fboundp 'startup-redirect-eln-cache)
    (startup-redirect-eln-cache
     (convert-standard-filename
      (expand-file-name "var/eln-cache/" user-emacs-directory))))
#+END_SRC

** Clean up
#+BEGIN_SRC elisp :tangle "early-init.el"
  (setq backup-directory-alist    '(("." . "~/.local/share/Trash/files"))
	tramp-backup-directory-alist   backup-directory-alist
	temporary-directory    '(("." . "~/.local/share/Trash/files"))
	undo-tree-directory    '(("." . "~/.local/share/Trash/files"))
	vc-make-backup-files t ;; Use version control for backups
	version-control t     ;; Use version numbers for backups.
	kept-new-versions 10 ;; Number of newest versions to keep.
	kept-old-versions 5 ;; Number of oldest versions to keep.
	delete-old-versions t ;; Don't ask to delete excess backup versions.
	backup-by-copying t) ;; Copy all files, don't rename them.
#+END_SRC

** Fonts
#+BEGIN_SRC elisp :tangle "early-init.el"
  (custom-set-faces
   '(default ((t (:font "JetBrainsMono NFM" :weight medium :height 100 :slant normal)))) ;; Impact startup time, Xresources will handle the default font.
   '(fixed-pitch ((t (:font "JetBrainsMono NFM" :weight medium :height 90 :slant normal))))
   '(variable-pitch ((t (:font "UbuntuMono Nerd Font" :weight medium :height 110 :slant normal))))
   '(font-lock-comment-face ((t (:font "JetBrainsMono NFM" :height 100 :weight medium :slant italic))))
   '(mode-line ((t (:font "JetBrainsMono NFM" :weight medium :height 100 :slant normal))))
   '(mode-line-active ((t (:font "JetBrainsMono NFM" :weight medium :height 100 :slant normal))))
   '(mode-line-inactive ((t (:font "JetBrainsMono NFM" :weight medium :height 100 :slant italic))))
   '(centaur-tabs-default ((t (:font "JetBrainsMono NFM" :weight medium :height 100 :slant normal))))
   '(centaur-tabs-selected ((t (:font "JetBrainsMono NFM" :weight medium :height 100 :slant normal))))
   '(centaur-tabs-unselected ((t (:font "JetBrainsMono NFM" :weight medium :height 100 :slant italic))))
   '(org-link ((t (:font "JetBrainsMono NFM" :weight medium :height 100 :slant italic)))))
#+END_SRC
* Init

** Maximum native eln speed.
#+BEGIN_SRC elisp
  ;; -*- lexical-binding: t;-*-
    (setq native-comp-speed 3)
;
;    ;; Look for native-compile-async using variable "C-h native-comp-eln-load-path"
    (native-compile-async "/usr/lib/emacs/30.0.50/native-lisp" 'recursively)
    (setq native-comp-compiler-options '("-march=znver3" "-Ofast" "-g0" "-fno-finite-math-only" "-fgraphite-identity" "-floop-nest-optimize" "-fdevirtualize-at-ltrans" "-fipa-pta" "-fno-semantic-interposition" "-flto=auto"          "-fuse-linker-plugin"))
    (setq native-comp-driver-options '("-march=znver3" "-Ofast" "-g0" "-fno-finite-math-only" "-fgraphite-identity" "-floop-nest-optimize" "-fdevirtualize-at-ltrans" "-fipa-pta" "-fno-semantic-interposition" "-flto=auto" "-fuse-linker-plugin"))
#+END_SRC

** Color
#+BEGIN_SRC elisp 
  (custom-set-faces
;   '(default ((t (:background "black")))) ;; background color (controlled by =doom theme=)
   '(mode-line ((t (:background "#0adad5" ;; Modeline color.
				:foreground "#000000")))))
#+END_SRC

* Use package

** Use-package.el is no longer needed at runtime.
#+BEGIN_SRC elisp
  ;; https://github.com/jwiegley/use-package?tab=readme-ov-file#use-packageel-is-no-longer-needed-at-runtime
  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Use-package repo's
#+BEGIN_SRC elisp 
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

** Native compile external packages
#+BEGIN_SRC elisp 
  (setq-default
   package-native-compile t
   use-package-always-ensure t
   use-package-enable-imenu-support t)
#+END_SRC

* Welcome Screen
#+BEGIN_SRC elisp 
  (defun show-welcome-screen-buffer ()
    "Show *Welcome-screen* buffer."
    (with-current-buffer (get-buffer-create "*Welcome-screen*")
      (setq truncate-lines t)
      (let* ((buffer-read-only)
	     (image-path (expand-file-name "images/emacs-logo.png" user-emacs-directory))
	     (image (create-image image-path))
	     (size (image-size image))
	     (height (cdr size))
	     (width (car size))
	     (top-margin (floor (/ (- (window-height) height) 2)))
	     (left-margin (floor (/ (- (window-width) width) 2)))
	     (prompt-title "E M A C S"))
	(erase-buffer)
	(setq mode-line-format nil) ;; Disable the modeline
	(setq elscreen-toggle-display-tab nil) ; hide elscreen
	(goto-char (point-min))
	(insert (make-string top-margin ?\n ))
	(insert (make-string left-margin ?\ ))
	(insert-image image)
	(insert "\n\n\n")
	(insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
	(insert prompt-title))
      (setq cursor-type nil)
      (read-only-mode +1)
      (switch-to-buffer (current-buffer))
      (local-set-key (kbd "q") 'kill-this-buffer)))

  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)

  (when (< (length command-line-args) 2)
    (add-hook 'emacs-startup-hook (lambda ()
				    (when (display-graphic-p)
				      (show-welcome-screen-buffer)))))
#+END_SRC

* Functions

** Emacs Frame title
#+BEGIN_SRC elisp 
  (setq frame-title-format "E M A C S")
#+END_SRC
** Setting up shell.
#+BEGIN_SRC elisp 
  (setq-default shell-file-name "/bin/bash")
#+END_SRC

** Setting up browser.
#+BEGIN_SRC elisp 
;  (setq browse-url-browser-function 'browse-url-generic
;        browse-url-generic-program "librewolf --profilemanager")
#+END_SRC

** Set the working directory to home
#+BEGIN_SRC elisp 
  (cd "~/")
#+END_SRC

** Declare all themes as safe
#+BEGIN_SRC elisp 
  (setq custom-safe-themes t)
#+END_SRC

** Show the help buffer after startup
#+BEGIN_SRC elisp 
  (add-hook 'after-init-hook 'help-quick)
#+END_SRC

** Don't let the specified get killed.
#+BEGIN_SRC elisp 
  (defun my/protect-vital-buffers ()
    "Prevent killing vital buffers."
    (not (member (buffer-name) '("*Welcome-screen*"))))
  (message "I'm Immortal")
  (add-hook 'kill-buffer-query-functions #'my/protect-vital-buffers)
#+END_SRC

** Visit the config.
#+BEGIN_SRC elisp 
  (defun my/visit-init ()
    "Open the Emacs init file."
    (interactive)
    (message "Opening Emacs Init")
    (find-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

** Visit the qtile config.
#+BEGIN_SRC elisp 
  (defun my/visit-qtile ()
    "Open the qtile cofnig file."
    (interactive)
    (message "Opening Qtile Configuration")
    (find-file "~/.config/qtile/config.py"))
#+END_SRC

** Highlight the word.
#+BEGIN_SRC elisp 
  (defun my/highlight-word ()
    "Highlight the current word you are on."
    (interactive)
    (message "Highlighting word")
    (backward-word 1)
    (set-mark-command nil)
    (forward-word 1))
#+END_SRC

** Close all buffers
#+begin_src elisp
  (defun my/kill-all-buffers ()
    "Kill all the buffers."
    (interactive)
    (message "Killed all buffers")
    (mapc 'kill-buffer (buffer-list)))
#+end_src

** Switch cursor automatically to new window.
#+BEGIN_SRC elisp 
  (defun my/split-and-follow-horizontally ()
    "Split horziontally and follow."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun my/split-and-follow-vertically ()
    "Split vertically and follow."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC

** Kill the whole word
#+BEGIN_SRC elisp 
  (defun my/kill-whole-word ()
    "kill the whole word."
    (interactive)
    (message "Killed whole word")
    (backward-word)
    (kill-word 1))
#+END_SRC

** Copy the whole line
#+BEGIN_SRC elisp 
  (defun my/copy-whole-line ()
    "Copy whole line."
    (interactive)
    (message "Copied whole line")
    (save-excursion
      (kill-new
       (buffer-substring
	(pos-bol)
	(pos-eol)))))
#+END_SRC

** Visible bell
#+BEGIN_SRC elisp 
  (setq visible-bell nil
	ring-bell-function 'double-flash-mode-line)
  (defun double-flash-mode-line ()
    (let ((flash-sec (/ 3.0 20)))
      (invert-face 'mode-line)
      (run-with-timer flash-sec nil #'invert-face 'mode-line)))

					  ; Flash the foreground of the mode-line
					  ;(setq ring-bell-function
					  ;      (lambda ()
					  ;        (let ((orig-fg (face-foreground 'mode-line)))
					  ;          (set-face-foreground 'mode-line "#F2804F")
					  ;          (run-with-idle-timer 0.1 nil
					  ;                               (lambda (fg) (set-face-foreground 'mode-line fg))
					  ;                               orig-fg))))
					  ;(setq ring-bell-function
					  ;      (lambda ()
					  ;        (let ((orig-fg (face-foreground 'mode-line)))
					  ;          (set-face-foreground 'mode-line "#F2804F")
					  ;          (run-with-idle-timer 0.1 nil
					  ;                               (lambda (fg) (set-face-foreground 'mode-line fg))
					  ;                               orig-fg))))
#+END_SRC


#+BEGIN_SRC elisp 
  (setq enable-recursive-minibuffers t)

  (setq kill-ring-max 100)
#+END_SRC

** Don't prompt for confirmation when we create a new file or buffer (assume the user knows what they're doing).
#+BEGIN_SRC elisp 
  (setq confirm-nonexistent-file-or-buffer nil)
#+END_SRC

#+BEGIN_SRC elisp 
  (setq hscroll-margin 2
	hscroll-step 1
	;; Emacs spends too much effort recentering the screen if you scroll the
	;; cursor more than N lines past window edges (where N is the settings of
	;; `scroll-conservatively'). This is especially slow in larger files
	;; during large-scale scrolling commands. If kept over 100, the window is
	;; never automatically recentered. The default (0) triggers this too
	;; aggressively, so I've set it to 10 to recenter if scrolling too far
	;; off-screen.
	scroll-conservatively 10
	scroll-margin 0
	scroll-preserve-screen-position t
	;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
	;; for tall lines.
	auto-window-vscroll nil
	;; mouse
	mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
	mouse-wheel-scroll-amount-horizontal 2)

#+END_SRC

** Don't blink the cursor
#+BEGIN_SRC elisp 
  ;;; Cursor

  ;; The blinking cursor is distracting, but also interferes with cursor settings
  ;; in some minor modes that try to change it buffer-locally (like treemacs) and
  ;; can cause freezing for folks (esp on macOS) with customized & color cursors.
  (blink-cursor-mode -1)
#+END_SRC

** Don't blink the paren matching the one at point, it's too distracting.
#+BEGIN_SRC elisp 
  (setq blink-matching-paren nil)
#+END_SRC

#+BEGIN_SRC elisp 
  ;; Don't stretch the cursor to fit wide characters, it is disorienting,
  ;; especially for tabs.
  (setq x-stretch-cursor nil)

  ;; Prettify symbols
  (global-prettify-symbols-mode t)

  ;; For help, see: https://www.masteringemacs.org/article/understanding-minibuffer-completion
  (setq
   enable-recursive-minibuffers t                ; Use the minibuffer whilst in the minibuffer
   completion-cycle-threshold 1                  ; TAB cycles candidates
   completions-detailed t                        ; Show annotations
   tab-always-indent 'complete                   ; When I hit TAB, try to complete, otherwise, indent
   completion-styles '(basic initials substring) ; Different styles to match input to candidates

   completion-auto-help 'always                  ; Open completion always; `lazy' another option
   completions-max-height 20                     ; This is arbitrary
   completions-detailed t
   completions-format 'one-column
   completions-group t
   completion-auto-select 'second-tab            ; Much more eager
					  ; completion-auto-select t)                     ; See `C-h v completion-auto-select' for more possible values
   )

  (keymap-set minibuffer-mode-map "TAB" 'minibuffer-complete) ; TAB acts more like how it does in the shell
#+END_SRC

** Disable line numbers, mode-line, tab-bar and etc.
#+BEGIN_SRC elisp 
  ;; Disable line numbers, mode-line, tab-bar, tab-line for some modes
  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  dashboad-mode-hook
		  neotree-mode-hook
		  dashboard-mode-hook
		  pdf-view-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0) (setq mode-line-format nil) (tab-bar-mode 0) (tab-line-mode 0) (rainbow-mode 0) (rainbow-delimiters-mode 0))))
#+END_SRC

** custom-file to /tmp directory
#+BEGIN_SRC elisp 
  (setq custom-file (make-temp-file "emacs-custom-"))
#+END_SRC

* Keybindings
#+BEGIN_SRC elisp
  ;; Escape
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Visiting files
  (global-set-key (kbd "C-c e") 'my/visit-init) ; vist the config
  (global-set-key (kbd "C-c q") 'my/visit-qtile) ; vist the qtile config

  ;; Restart the Emacs
  (global-set-key (kbd "C-x r") 'restart-emacs) ; restart the Emacs.

  ;; Avoid accidentally minimizing emacs.
  (global-unset-key (kbd "C-z"))

  ;; Close all the buffers.
  (global-set-key (kbd "C-c k") 'my/kill-all-buffers)

  ;; Emacs
  (global-set-key (kbd "<f12>") 'hide-mode-line-mode)

  ;; Buffers
 ;(global-set-key (kbd "C-x b") 'buffer-menu)    ; ibuffer
  (global-set-key (kbd "C-x C-k") 'kill-buffer)    ; kill buffer
 ;(global-set-key (kbd "C-x j") 'previous-buffer)    ; move to previous buffer
 ;(global-set-key (kbd "C-x k") 'next-buffer)    ; move to next buffer
  (global-set-key (kbd "C-c r") 'recentf)    ; open recent buffers
  (global-set-key (kbd "C-x 2") 'my/split-and-follow-horizontally) ;; move focus to new window.
  (global-set-key (kbd "C-x 3") 'my/split-and-follow-vertically) ;; move focust to new window.

  ;; File
 ;(global-set-key (kbd "C-c f") 'find-name-dired)
 ;(global-set-key (kbd "C-c s") 'find-lisp-find-dired)
  (global-set-key (kbd "C-c w w") 'my/kill-whole-word)
  (global-set-key (kbd "C-c w l") 'my/copy-whole-line)
  (global-set-key (kbd "C-c w h") 'my/highlight-word)
  (global-set-key (kbd "C-c v") 'view-mode)

  ;; Applications
  (global-set-key (kbd "C-c p") 'dmenu) ; dmenu
  (global-set-key (kbd "C-c T") 'vterm)      ; vterm
  (global-set-key (kbd "C-c t") 'vterm-toggle-cd) ; vterm-toggle to cd

  (global-set-key (kbd "C-x B") 'infu-bionic-reading-buffer) ; bionic reading
  (global-set-key (kbd "C-+") 'text-scale-increase) ; zoom in
  (global-set-key (kbd "C--") 'text-scale-decrease) ; zoom out
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-increase) ; zoom in with mouse
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-decrease) ; zoom out with mouse
  (global-set-key (kbd "C-c n") 'neotree-toggle)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-.") 'avy-goto-char)
  (global-set-key (kbd "C-c c") 'compile)
  (global-set-key (kbd "C-c b") 'nyan-mode)
  (global-set-key (kbd "C-c C-u") 'package-upgrade-all)
  (global-set-key (kbd "C-c g") #'gdb)
  (global-set-key (kbd "C-x u") #'vundo)
  (global-set-key (kbd "M-y") #'popup-kill-ring)
  (global-set-key (kbd "C-x d") #'dirvish)
#+END_SRC

* Avy
#+BEGIN_SRC elisp 
  (use-package avy
    :ensure t
    :commands (avy-goto-char))
#+END_SRC

* Zone
#+BEGIN_SRC elisp 
  (autoload 'zone-when-idle "zone" nil t)
  (zone-when-idle 820) ; time after which zone run.
  (setq zone-programs [zone-pgm-whack-chars])
#+END_SRC

* Bionic Reading
#+BEGIN_SRC elisp 
  (defvar infu-bionic-reading-face nil "a face for `infu-bionic-reading-region'.")

  (setq infu-bionic-reading-face 'bold)
  ;; try
  ;; 'bold
  ;; 'error
  ;; 'warning
  ;; 'highlight
  ;; or any value of M-x list-faces-display

  (defun infu-bionic-reading-buffer ()
    "Bold the first few chars of every word in current buffer.
  Version 2022-05-21"
    (interactive)
    (infu-bionic-reading-region (point-min) (point-max)))

  (defun infu-bionic-reading-region (Begin End)
    "Bold the first few chars of every word in region.
  Version 2022-05-21"
    (interactive "r")
    (let (xBounds xWordBegin xWordEnd  )
      (save-restriction
	(narrow-to-region Begin End)
	(goto-char (point-min))
	(while (forward-word)
	  ;; bold the first half of the word to the left of cursor
	  (setq xBounds (bounds-of-thing-at-point 'word))
	  (setq xWordBegin (car xBounds))
	  (setq xWordEnd (cdr xBounds))
	  (setq xBoldEndPos (+ xWordBegin (1+ (/ (- xWordEnd xWordBegin) 2))))
	  (put-text-property xWordBegin xBoldEndPos
			     'font-lock-face infu-bionic-reading-face)))))
#+END_SRC

* Async
#+BEGIN_SRC elisp 
  (use-package async
    :ensure t
    :init (dired-async-mode 1)
    :config
    (async-bytecomp-package-mode 'all)
    :init
    (setq message-send-mail-function 'async-smtpmail-send-it))
#+END_SRC

* Avoid async user interaction
Let Emacs manage your identification.
#+BEGIN_SRC elisp 
  (use-package auth-source
    :no-require t
    :config (setq auth-sources '("~/.authinfo.gpg" "~/.netrc")))
#+END_SRC

* Dired rsync
#+BEGIN_SRC elisp 
  (use-package dired-rsync
    :ensure t
    :defer t)
#+END_SRC

* Dirvish
#+BEGIN_SRC elisp 
  (use-package dirvish
    :ensure t
    :commands (dirvish)
    :config
    (dirvish-override-dired-mode 1))
#+END_SRC

* Dired
#+BEGIN_SRC elisp 
  (use-package dired-open
    :ensure t
    :commands dired-open-by-extensions)
  (setq dired-open-extensions '(("jpg" . "eog")
				("png" . "eog")
				("mkv" . "mpv")
				("mp3" . "mpv")
				("mpg" . "mpv")
				("epub" . "zathura")
				("mp4" . "mpv")))
#+END_SRC

* Icons
#+BEGIN_SRC elisp 
  (use-package all-the-icons
    :ensure t
    :defer 
    :if (display-graphic-p)
    :init (add-hook 'all-the-icons-hook 'all-the-icons-install-fonts))

  (use-package all-the-icons-dired
    :ensure t
    :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package all-the-icons-ibuffer
    :ensure t
    :defer t
    :init (all-the-icons-ibuffer-mode 1))
#+END_SRC

* COMMENT Dashboard
#+BEGIN_COMMENT elisp 
(use-package dashboard
:ensure t
:config
(dashboard-modify-heading-icons '((recents . "file-text")
(bookmarks . "book")))t
:init
:custom
(dashboard-banner-logo-title "E M A C S")
(dashboard-startup-banner (expand-file-name "images/emacs-logo.png" user-emacs-directory))
(dashboard-center-content t)
(dashboard-set-file-icons t)
(dashboard-set-navigator t)
(dashboard-set-heading-icons t)
(dashboard-set-init-info t)
(dashboard-center-content t)
(dashboard-vertically-center-content t)
(dashboard-navigation-cycle t)
(dashboard-display-icons-p t)
(dashboard-icon-type 'all-the-icons)
(dashboard-set-heading-icons t)
(dashboard-set-file-icons t)
(dashboard-footer-icon "")
(dashboard-footer-message '("\"Have a Wonderful Day!\""))
(dashboard-items nil)
(dashboard-item-shortcuts '((recents   . "r")
(bookmarks . "m")
(projects  . "p")
(agenda    . "a")
(registers . "e")))
(dashboard-items '((bookmarks . 5)
(projects . 5)
(recents . 5)))
  
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
:config
(dashboard-setup-startup-hook))
(setq dashboard-navigator-buttons
`(;; line1
;; Keybindings
((,(all-the-icons-octicon "search" :height 0.9 :v-adjust -0.1)
" Find file" nil
(lambda (&rest _) (ido-find-file)) nil "" "            C-x C-f"))
((,(all-the-icons-octicon "file-directory" :height 1.0 :v-adjust -0.1)
" Open project" nil
(lambda (&rest _) (project-find-dir)) nil "" "         C-x p d"))
((,(all-the-icons-octicon "three-bars" :height 1.1 :v-adjust -0.1)
" File explorer" nil
(lambda (&rest _) (project-dired)) nil "" "        C-x p D"))))
#+END_COMMENT

* Ido
#+BEGIN_SRC elisp
  (use-package ido
    :ensure nil
    :hook (after-init)
    :config
    (setq ido-enable-flex-matching t)
    (ido-mode 1)
    (setq ido-ubiquitous-mode 1
	  ido-everywhere 1))

  (use-package ido-vertical-mode
    :ensure t
    :hook (after-init . ido-vertical-mode))
  (autoload 'ido-find-file "ido" nil t)
#+END_SRC

* Irony
#+BEGIN_SRC elisp 
  (use-package irony
    :ensure t
    :defer t
    :hook
    ((c++-mode c-mode) . irony-mode)
    ('irony-mode-hook) . 'irony-cdb-autosetup-compile-options)
#+END_SRC

* Neotree
#+BEGIN_SRC elisp 
  (use-package neotree
    :ensure t
    :commands (neotree)
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (add-hook 'neo-after-create-hook (lambda (&rest _) (display-line-numbers-mode -1))))
  (setq neo-smart-open t)
#+END_SRC

* Hide Mode-line
#+BEGIN_SRC elisp 
  (use-package hide-mode-line
    :ensure t
    :defer t
    :commands (hide-mode-line-mode))
					  ;  (add-hook 'completion-list-mode-hook #'hide-mode-line-mode)
					  ;  (add-hook 'neotree-mode-hook #'hide-mode-line-mode)
#+END_SRC

* Nerd Icons
#+BEGIN_SRC elisp 
  (use-package nerd-icons
    :ensure t
    :defer t)
#+END_SRC

* Org
#+BEGIN_SRC elisp
  (use-package org
    :ensure t
    :defer t
    :diminish (org-mode)
    :commands (org-capture org-agenda))
#+END_SRC

** Org modern
#+begin_SRC elisp 
  (use-package org-modern
    :ensure t
    :hook (org-mode . org-modern-mode))
#+end_SRC

** Common settings
#+BEGIN_SRC elisp 
  (with-eval-after-load "org"
    '(require 'ox-md nil t)
    (setq org-ellipsis " ")
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-export-with-smart-quotes t)
    (setq org-src-window-setup 'current-window)

    (custom-set-faces
     '(org-block ((t (:background "black")))))
					  ;      '(org-block-begin-line ((t (:background "white"))))
					  ;     '(org-block-end-line ((t (:background "grey"))))
					  ;     '(org-block-background ((t (:background "black"))))

    (add-hook 'org-mode-hook (lambda ()
			       (push '("[ ]" .  "☐") prettify-symbols-alist)
			       (push '("[X]" . "☑" ) prettify-symbols-alist)
			       (push '("[-]" . "❍" ) prettify-symbols-alist)
			       (prettify-symbols-mode))))

  (with-eval-after-load 'org-faces
    (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face))))
#+END_SRC

** Org babel execute
#+BEGIN_SRC elisp 
  ;; Org babel execute.
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (python . t)
       (lua . t)
       (awk . t)
       (shell . t)
       (org . t)
       (emacs-lisp . t))))
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Org bullets
#+BEGIN_SRC elisp 
  (use-package org-bullets
    :after (org)
    :defer t
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Org auto tangle
#+BEGIN_SRC elisp 
  (use-package org-auto-tangle
    :ensure t
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
    :diminish (org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t
	  org-auto-tangle-babel-safelist '(
					   "~/.config/emacs/config.org")))
#+END_SRC

* COMMENT Projectile
#+BEGIN_COMMENT elisp 
(use-package projectile
:ensure t
:defer 1
:init
(projectile-mode 1)
:config
(setq projectile-completion-system 'ido))
#+END_COMMENT

* Swiper
#+BEGIN_SRC elisp 
  (use-package swiper
    :ensure t
    :defer 2
    :commands (swiper))
#+END_SRC

* Vterm & vterm-toggle
#+BEGIN_SRC elisp 
  (use-package vterm
    :ensure t
    :commands (vterm))

  (use-package vterm-toggle
    :ensure t
    :commands (vterm-toggle))
#+END_SRC

* Which key
#+BEGIN_SRC elisp 
  (use-package which-key
    :ensure t
    :defer 1
    :custom
    (which-key-lighter "")
					  ;  (which-key-sort-order #'which-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    (which-key-compute-remaps t)
    (which-key-side-window-slot -10)
    (which-key-separator " -> ")
    (which-key-allow-evil-operators t)
    (which-key-use-C-h-commands t)
    (which-key-show-remaining-keys t)
    (which-key-show-prefix 'bottom)
    :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    (which-key-setup-minibuffer))
#+END_SRC

* Nyan
#+BEGIN_SRC elisp 
  (use-package nyan-mode
    :defer 2
    :config
    (nyan-mode)
    :custom
    (nyan-animate-nyancat t)
    (autoload 'nyan-mode "nyan-mode" "Nyan Mode" t)
    (nyan-bar-length 22)
    (nyan-animation-frame-interval )
    (nyan-minimum-window-width 8)
    (nyan-wavy-trail t)
    (nyan-cat-face-number 3))
#+END_SRC

* GDB
#+BEGIN_SRC elisp 
					  ; GDB layout
  (setq gdb-many-windows nil)

  (defun set-gdb-layout(&optional c-buffer)
    (if (not c-buffer)
	(setq c-buffer (window-buffer (selected-window)))) ;; save current buffer

    ;; from http://stackoverflow.com/q/39762833/846686
    (set-window-dedicated-p (selected-window) nil) ;; unset dedicate state if needed
    (switch-to-buffer gud-comint-buffer)
    (delete-other-windows) ;; clean all

    (let* (
	   (w-source (selected-window)) ;; left top
	   (w-gdb (split-window w-source nil 'right)) ;; right bottom
	   (w-locals (split-window w-gdb nil 'above)) ;; right middle bottom
	   (w-stack (split-window w-locals nil 'above)) ;; right middle top
	   (w-breakpoints (split-window w-stack nil 'above)) ;; right top
	   (w-io (split-window w-source (floor(* 0.9 (window-body-height)))
			       'below)) ;; left bottom
	   )
      (set-window-buffer w-io (gdb-get-buffer-create 'gdb-inferior-io))
      (set-window-dedicated-p w-io t)
      (set-window-buffer w-breakpoints (gdb-get-buffer-create 'gdb-breakpoints-buffer))
      (set-window-dedicated-p w-breakpoints t)
      (set-window-buffer w-locals (gdb-get-buffer-create 'gdb-locals-buffer))
      (set-window-dedicated-p w-locals t)
      (set-window-buffer w-stack (gdb-get-buffer-create 'gdb-stack-buffer))
      (set-window-dedicated-p w-stack t)

      (set-window-buffer w-gdb gud-comint-buffer)

      (select-window w-source)
      (set-window-buffer w-source c-buffer)
      ))
  (defadvice gdb (around args activate)
    "Change the way to gdb works."
    (setq global-config-editing (current-window-configuration)) ;; to restore: (set-window-configuration c-editing)
    (let (
	  (c-buffer (window-buffer (selected-window))) ;; save current buffer
	  )
      ad-do-it
      (set-gdb-layout c-buffer))
    )
  (defadvice gdb-reset (around args activate)
    "Change the way to gdb exit."
    ad-do-it
    (set-window-configuration global-config-editing))
#+END_SRC

* Dimmer
#+BEGIN_SRC elisp 
  (use-package dimmer
    :ensure t
    :disabled t
    :defer 5
    :config (dimmer-mode)
    :custom (dimmer-fraction 0.3))
#+END_SRC

* COMMENT Diminish
#+BEGIN_COMMENT elisp 
(use-package diminish
:ensure t
:init
(diminish 'which-key-mode)
(diminish 'linum-relative-mode)
(diminish 'hungry-delete-mode)
(diminish 'visual-line-mode)
(diminish 'subword-mode)
(diminish 'beacon-mode)
(diminish 'irony-mode)
(diminish 'page-break-lines-mode)
(diminish 'auto-revert-mode)
(diminish 'rainbow-delimiters-mode)
(diminish 'rainbow-mode)
(diminish 'yas-minor-mode)
(diminish 'flycheck-mode)
(diminish 'helm-mode)
(diminish 'company-mode)
(diminish 'beacon-mode)
(diminish 'hungry-delete-mode)
(diminish 'org-auto-tangle-mode)
(diminish 'highlight-parentheses-mode)
(diminish 'evil-collection-impaired-mode)
(diminish 'org-mode))
#+END_COMMENT

* Vertico
#+BEGIN_SRC elisp 
  (defun def/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name, delete up to parent folder otherwise delete word"
    (interactive "p")
    (if minibuffer-completing-file-name
	;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
	(if (string-match-p "/." (minibuffer-contents))
	    (zap-up-to-char (- arg) ?/)
	  (delete-minibuffer-contents))
      (backward-kill-word arg)))
#+END_SRC

* Vertico
#+BEGIN_SRC elisp 
  (use-package vertico
    :ensure t
    :hook (after-init . vertico-mode)
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous)
		("C-f" . vertico-exit)
		:map minibuffer-local-map
		("M-h" . def/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    (vertico-scroll-margin 1)
    (vertico-resize t))
#+END_SRC

* Persistent history.
#+BEGIN_SRC elisp 
  (use-package savehist
    :ensure nil
    :defer 1
    :init
    (setq history-length 15)
    (savehist-mode))
#+END_SRC

* A few more useful configurations...
#+BEGIN_SRC elisp 
  (use-package emacs
    :defer 1
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+END_SRC

* Optionally use the `orderless' completion style.
#+BEGIN_SRC elisp 
  (use-package orderless
    :ensure t
    :after (vertico)
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

* COMMENT Vim like modeline
#+BEGIN_COMMENT elisp
(use-package vim-like-modeline
:ensure nil
:defer 0.5
:init
(with-eval-after-load 'vim-like-modeline
(defun ntf/mode-line-format (left right)
"Return a string of `window-width' length.
Containing LEFT, and RIGHT aligned respectively."
(let ((available-width (- (window-width) (length left) 1)))
(format (format "%%s %%%ds " available-width) left right)))

(defface evil-mode-line-face '((t (:foreground  "white"
:background "black"))) "Face for evil mode-line colors.")

(setq-default
mode-line-format
'((:eval (ntf/mode-line-format
;; left portion
(format-mode-line
(quote ("%e"
(:eval
(when (bound-and-true-p evil-local-mode)
(propertize
(concat
" "
(upcase
(substring (symbol-name evil-state) 0 1))
(substring (symbol-name evil-state) 1)
" ") 'face 'evil-mode-line-face)))
" " (:eval (when (buffer-modified-p) "[+]"))
" " mode-line-buffer-identification
" %l:%c")))
;; right portion
(format-mode-line (quote ("%m " (vc-mode vc-mode))))))))))
#+END_COMMENT

* Company
#+BEGIN_SRC elisp 
  (use-package company
    :hook ((prog-mode text-mode) . company-mode)
					  ;    :init (add-hook 'after-init-hook 'global-company-mode)
    :diminish (company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

* C and C++
#+BEGIN_SRC elisp 
  (use-package company-c-headers
    :ensure t
    :hook
    (cc-mode . company-c-headers)
    (c++-mode . company-c-headers)
    (objc-mode . company-c-headers))

  (use-package company-irony
    :ensure t
    :after (company)
    :config
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-c-headers
		    'company-dabbrev-code
		    'company-irony)))
#+END_SRC

* Lsp
#+BEGIN_SRC elisp 
  (use-package lsp-mode
    :hook ((lua-mode bash-mode c-mode c++-mode python-mode js-mode) . lsp-deferred)
    (lsp-mode . lsp-enable-which-key-intergration)
    :commands lsp lsp-deferred)

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-header t)
    (setq lsp-ui-doc-include-signature t)
    (setq lsp-ui-doc-border (face-foreground 'default))
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-delay 0.05))
#+END_SRC

* Tree sitter
#+BEGIN_SRC elisp 
  (use-package treesit
    :ensure nil
    :defer 1
    :config
    (require 'treesit))
#+END_SRC

* Evil mode
#+BEGIN_SRC elisp 
  (use-package evil
    :hook (after-init . evil-mode)
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t))
#+END_SRC

** Evil collection
#+BEGIN_SRC elisp 
  (use-package evil-collection
    :after (evil)
    :diminish (evil-collection-unimpaired-mode)
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+END_SRC

** Evil tutor
#+BEGIN_SRC elisp 
  (use-package evil-tutor
    :ensure t
    :commands (evil-tutor))
#+END_SRC

* Man
#+BEGIN_SRC elisp 
  (autoload 'man "man" nil t)
#+END_SRC

* Dmenu
#+BEGIN_SRC elisp 
  (use-package dmenu
    :ensure t
    :commands (dmenu))
#+END_SRC

* Beacon
#+BEGIN_SRC elisp 
  (use-package beacon
    :ensure t
    :defer 3
    :diminish (beacon-mode)
    :config
    (beacon-mode))
#+END_SRC

* Doom theme
#+BEGIN_SRC elisp
   (use-package doom-themes
     :ensure t
     :config
     ;; Global settings (defaults)
     (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
 	  doom-themes-enable-italic t)
     (load-theme 'doom-ir-black t)
     ;; Enable flashing mode-line on errors
     (doom-themes-visual-bell-config)
     ;; Enable custom neotree theme (all-the-icons must be installed!)
     (doom-themes-neotree-config)
     ;; or for treemacs users
     (setq doom-themes-treemacs-theme "doom-ir-black") ; use "doom-colors" for less minimal icon theme
     (doom-themes-treemacs-config)
     ;; Corrects (and improves) org-mode's native fontification.
     (doom-themes-org-config)
     (doom-themes-visual-bell-config)
     :init
     (custom-set-faces
      '(default ((t (:background "black"))))))
#+END_SRC

* COMMENT Doom Modeline
#+BEGIN_COMMENT elisp 
(use-package doom-modeline
:hook (after-init . doom-modeline-mode)
:custom
;; Don't compact font caches during GC. Windows Laggy Issue
(inhibit-compacting-font-caches t)
(doom-modeline-icon t)
(doom-modeline-major-mode-icon t)
(doom-modeline-major-mode-color-icon t)
(doom-modeline-buffer-state-icon t)
(doom-modeline-buffer-modification-icon t)
(doom-modeline-lsp-icon t)
(doom-modeline-modeline-time-icon t)
(doom-modeline-time-live-icon t)
(doom-modeline-time-analogue-clock t)
(doom-modeline-time-clock-size 0.7)
(doom-modeline-unicode-fallback nil)
(doom-modeline-buffer-name t)
(doom-modeline-highlight-modified-buffer-name t)
(doom-modeline-column-zero-based t)
(doom-modeline-percent-position '(-3 "%p"))
(doom-modeline-position-line-format '("L%l")
(doom-modeline-minor-modes nil)
(doom-modeline-enable-word-count nil)
(doom-modeline-buffer-encoding t)
(doom-modeline-indent-info nil)
(doom-modeline-total-line-number nil)
(doom-modeline-vcs-icon t)
(doom-modeline-check-icon t)
(doom-modeline-check-simple-format nil)
(doom-modeline-number-limit 99)
(doom-modeline-vcs-max-length 12)
(doom-modeline-workspace-name t)
(doom-modeline-persp-name t)
(doom-modelin-display-default-persp-name nil)
(doom-modeline-persp-icon t)
(doom-modeline-lsp t)
(doom-modeline-modal t)
(doom-modeline-github nil)
(doom-modeline-icon (display-graphic-p))
(doom-modeline-checker-simple-format t)
(doom-line-numbers-style 'relative)
(doom-modeline-buffer-file-name-style 'relative-to-project)
(doom-modeline-buffer-modification-icon t)
(doom-modeline-buffer-encoding nil)
(doom-modeline-buffer-state-icon t)
(doom-modeline-flycheck-icon t)
(doom-modeline-height 25)
(doom-modeline-bar-width 4)
(doom-modeline-window-width-limit 85)
(doom-modeline-project-detection 'auto)))
#+END_COMMENT

* COMMENT Highlight paren
#+BEGIN_COMMENT elisp
(defun lispy-parens ()
"Setup parens display for lisp modes"
(setq show-paren-delay 0)
(setq show-paren-style 'parenthesis)
(make-variable-buffer-local 'show-paren-mode)
(show-paren-mode 1)
(set-face-background 'show-paren-match-face (face-background 'default))
(if (boundp 'font-lock-comment-face)
(set-face-foreground 'show-paren-match-face
(face-foreground 'font-lock-comment-face))
(set-face-foreground 'show-paren-match-face
(face-foreground 'default)))
(set-face-attribute 'show-paren-match-face nil :weight 'extra-bold))
#+END_COMMENT

* Highlight Parentheses
#+BEGIN_SRC elisp 
  (use-package highlight-parentheses
    :ensure t
    :defer t
    :diminish (highlight-parentheses-mode)
    :hook ((prog-mode text-mode) . global-highlight-parentheses-mode))
#+END_SRC

* Paren
#+BEGIN_SRC elisp
  (use-package paren
    :ensure nil
    :hook ((prog-mode text-mode) . show-paren-mode)
    :init
    (setq show-paren-deplay 0))
#+END_SRC

* Rainbow Delimiters
#+BEGIN_SRC elisp 
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode text-mode) . rainbow-delimiters-mode))
#+END_SRC

* Rainbow mode
#+BEGIN_SRC elisp 
  (use-package rainbow-mode
    :ensure t
    :defer 3
    :init
    (setq rainbow-ansi-colors nil)
    (setq rainbow-x-colors nil)

    (defun rainbow-mode-in-themes ()
      (when-let ((file (buffer-file-name))
		 ((derived-mode-p 'emacs-lisp-mode))
		 ((string-match-p "-theme" file)))
	(rainbow-mode 1)))
    :hook (emacs-lisp-mode . rainbow-mode-in-themes))
#+END_SRC

* Hungry Delete
#+BEGIN_SRC elisp 
  (use-package hungry-delete
    :ensure t
    :defer 3
    :diminish (hungry-delete-mode)
    :config
    (global-hungry-delete-mode))
#+END_SRC

* Pop kill ring
#+BEGIN_SRC elisp 
  (use-package popup-kill-ring
    :ensure t
    :defer 3)
#+END_SRC

* COMMENT Gcmh
#+BEGIN_COMMENT elisp 
;; github.com/doomemacs/doomemacs/blob/develop/core/core.el#L296
(use-package gcmh
:ensure t
:config (gcmh-mode)
(setq
gcmh-idle-delay 'auto ; default is 15s
gcmh-auto-idle-delay-factor 10
gcmh-high-cons-threshold (* 16 1024 1024))) ; 16mb
(make-directory (expand-file-name "gcmh" user-emacs-directory) t)
#+END_COMMENT

* So-long
Disable extras when visiting a file with long lines
#+BEGIN_SRC elisp 
  (use-package so-long
    :ensure t
    :disabled t
    :defer t)
#+END_SRC

* Pdf-tools
#+BEGIN_SRC elisp 
  (use-package pdf-tools
    :ensure t
    :defer 5
    :mode ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query)
    (pdf-loader-install))
#+END_SRC

* COMMENT Vim like tab bar
#+BEGIN_COMMENT elisp 
;; Description: Making the Emacs Tab Bar Look Like Vim's Tab Bar
;; License: MIT
;; Author: James Cherti
;; URL: https://www.jamescherti.com/emacs-tab-bar-vim-style-colors/

(defun my-tab-bar-vim-name-format-function (tab i)
"Add a space on the sides of every tab."
(let ((current-p (eq (car tab) 'current-tab)))
(propertize
(concat " "
(if tab-bar-tab-hints (format "%d " i) "")
(alist-get 'name tab)
(or (and tab-bar-close-button-show
(not (eq tab-bar-close-button-show
(if current-p 'non-selected 'selected)))
tab-bar-close-button)
"")
" ")
'face (funcall tab-bar-tab-face-function tab))))

(defun my-tab-bar-vim-like-colors ()
"Apply Vim-like color themes to Emacs tab bars."
(let* ((fallback-light "white")
(fallback-dark "#333333")
(bg-default (or (face-attribute 'default :background) fallback-light))
(fg-default (or (face-attribute 'default :foreground) fallback-dark))
(bg-modeline-inactive (or (face-attribute 'mode-line-inactive :background)
fallback-dark))
(fg-modeline-inactive (or (face-attribute 'mode-line-inactive :foreground)
fallback-light))
(bg-tab-inactive bg-modeline-inactive)
(fg-tab-inactive fg-modeline-inactive)
(fg-tab-active fg-default)
(bg-tab-active bg-default))
(setq tab-bar-tab-name-format-function #'my-tab-bar-vim-name-format-function)
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator))
(setq tab-bar-separator "\u200B")  ;; Zero width space to fix color bleeding
(setq tab-bar-tab-hints nil)  ;; Tab numbers of the left of the label
(setq tab-bar-new-button-show nil)
(setq tab-bar-close-button-show nil)
(setq tab-bar-auto-width nil)
(custom-set-faces
;; The tab bar's appearance
`(tab-bar
((t (:background ,bg-tab-inactive
:foreground ,fg-tab-inactive
:box (:line-width 3 :color ,bg-tab-inactive :style nil)))))
;; Inactive tabs
`(tab-bar-tab-inactive
((t (:background ,bg-tab-inactive
:foreground ,fg-tab-inactive
:box (:line-width 3 :color ,bg-tab-inactive :style nil)))))
;; Active tab
`(tab-bar-tab
((t (:background ,bg-tab-active :foreground ,fg-tab-active
:box (:line-width 3 :color ,bg-tab-active :style nil))))))))

;; Customize the appearance of the tab bar
;; Make sure to load your theme using 'load-theme' before
;; calling 'my-tab-bar-vim-like-colors'.
(my-tab-bar-vim-like-colors)
#+END_COMMENT

* Vundo
#+BEGIN_SRC elisp 
  (use-package vundo
    :ensure t
    :commands (vundo)
    :init
    (setq vundo-glyph-alist vundo-unicode-symbols))
#+END_SRC

* Centaur tabs
#+BEGIN_SRC elisp 
  (use-package centaur-tabs
    :ensure t
    :hook (after-init . centaur-tabs-mode)
    :config
					  ;    (centaur-tabs-mode 1)
    (setq centaur-tabs-style "wave")
    (setq centaur-tabs-set-bar 'under)
    (setq x-underline-at-descent-line t)
    (setq centaur-tabs-active-bar-face "#ffffff")
    (setq centaur-tabs-set-modified-marker t)
    (setq centaur-tabs-gray-out-icons 'buffer)
    (setq centaur-tabs-modified-marker "*")
    (setq centaur-tabs-set-close-button nil)
    (setq centaur-tabs-label-fixed-length 12)
    :hook
    (dired-mode . centaur-tabs-local-mode)
    )

  (with-eval-after-load 'centaur-tabs
    (defun centaur-tabs-hide-tab (x)
      "Do no to show buffer X in tabs."
      (let ((name (format "%s" x)))
	(or
	 ;; Current window is not dedicated window.
	 (window-dedicated-p (selected-window))

	 ;; Buffer name not match below blacklist.
	 (string-prefix-p "*epc" name)
	 (string-prefix-p "*helm" name)
	 (string-prefix-p "*Helm" name)
	 (string-prefix-p "*Compile-Log*" name)
	 (string-prefix-p "*lsp" name)
	 (string-prefix-p "*company" name)
	 (string-prefix-p "*Flycheck" name)
	 (string-prefix-p "*tramp" name)
	 (string-prefix-p " *Mini" name)
	 (string-prefix-p "*help" name)
	 (string-prefix-p "*straight" name)
	 (string-prefix-p " *temp" name)
	 (string-prefix-p "*Help" name)
	 (string-prefix-p "*mybuf" name)
	 (string-prefix-p "*scratch" name)
	 (string-prefix-p "*Messages" name)
	 (string-prefix-p "*Native-compile-log" name)
	 (string-prefix-p "*doom" name)
	 (string-prefix-p "*Async-native-compile-log" name)
	 (string-prefix-p "*scratch" name)
	 (string-prefix-p "*Welcome-screen" name)
	 (string-prefix-p "*dashboard" name)
	 (string-prefix-p "*Quick Help" name)
	 (string-prefix-p "*Flymake log" name)
	 (string-prefix-p "*org-Babel" name)
	 (string-prefix-p "*pdf-view-region" name)
	 (string-prefix-p "*lua-language-server" name)

	 ;; Is not magit buffer.
	 (and (string-prefix-p "magit" name)
	      (not (file-name-extension name)))))))
#+END_SRC

* Winner mode
#+BEGIN_SRC elisp 
  (use-package winner-mode
    :ensure nil
    :commands (winner-undo winner-redo))
#+END_SRC

* Auto package update
#+BEGIN_SRC elisp
  (use-package auto-package-update
    :ensure t
    :defer 5
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
#+end_src

* Lua mode
#+BEGIN_SRC elisp
  (use-package lua-mode
    :ensure t
    :mode ("%LUA" . lua-mode)
    :config
    (setq lua-indent-string-contents t)
    (setq lua-indent-close-paren-align t))
#+END_SRC
