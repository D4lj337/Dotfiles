#+TITLE: Complete Org Mode Guide: Features and Examples
#+AUTHOR: Comprehensive Reference
#+DATE: <2025-09-09 Tue>
#+STARTUP: overview
#+OPTIONS: toc:2 num:t

* Introduction

Org Mode is a powerful personal information management and authoring tool for GNU Emacs. It combines task management, note-taking, project planning, and document authoring in a plain text format that's both human-readable and highly structured. This comprehensive guide covers all major Org Mode features with practical examples.

* Getting Started

** Installation and Setup

Org Mode is included with Emacs 22 and later versions. To enable Org Mode functionality, add this to your =.emacs= file:

#+BEGIN_SRC elisp
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
#+END_SRC

** Creating Your First Org File

Create a new file with the =.org= extension. At the top of your document, add:

#+BEGIN_EXAMPLE
My Project -*- mode: org -*-
#+END_EXAMPLE

This ensures Emacs recognizes the file as an Org document.

* Document Structure

** Headlines and Outline Structure

Org Mode is built on a hierarchical outline structure using asterisks (=*=) to denote heading levels:

#+BEGIN_EXAMPLE
* Level 1 Headline
** Level 2 Headline
*** Level 3 Headline
**** Level 4 Headline
#+END_EXAMPLE

** Visibility Cycling

Navigate and manage document structure with these key commands:

- =TAB= - Cycle visibility of current subtree
- =S-TAB= - Cycle visibility of entire document
- =C-u TAB= - Global visibility cycling

** Structure Editing

Essential commands for manipulating headlines:

- =M-RET= - Insert new headline at same level
- =M-S-RET= - Insert new TODO headline
- =M-LEFT/RIGHT= - Promote/demote headline
- =M-S-LEFT/RIGHT= - Promote/demote subtree
- =M-UP/DOWN= - Move subtree up/down

* Basic Markup and Formatting

** Text Emphasis

Org Mode supports various text formatting options:

#+BEGIN_EXAMPLE
*bold text*
/italic text/
_underlined text_
=verbatim text=
~code text~
+strikethrough text+
#+END_EXAMPLE

** Lists

Create ordered and unordered lists:

#+BEGIN_EXAMPLE
- Unordered list item
- Another item
  - Nested item
  - Another nested item

1. Ordered list item
2. Second item
   1. Nested ordered item
   2. Another nested ordered item
#+END_EXAMPLE

** Links

Org Mode provides flexible linking capabilities:

#+BEGIN_EXAMPLE
[[http://www.example.com][Link description]]
[[file:path/to/file.org][File link]]
[[mailto:email@example.com][Email link]]
[[*Headline][Internal link to headline]]
#+END_EXAMPLE

** Quotes and Code Blocks

For longer quotes and code examples:

#+BEGIN_QUOTE
This is a quote block that can span
multiple lines.
#+END_QUOTE

#+BEGIN_EXAMPLE
This is an example block
for literal text.
#+END_EXAMPLE

#+BEGIN_SRC python
def hello_world():
    print("Hello, World!")
#+END_SRC

* TODO Management

** Basic TODO Keywords

Transform headlines into actionable tasks:

#+BEGIN_EXAMPLE
* TODO Write report
* DONE Review documentation
#+END_EXAMPLE

** Custom TODO Keywords

Define custom workflow states:

#+BEGIN_EXAMPLE
#+TODO: TODO(t) STARTED(s) WAITING(w) | DONE(d) CANCELED(c)

* TODO Research topic
* STARTED Writing first draft
* WAITING Feedback from reviewer
* DONE Final submission
* CANCELED Outdated requirement
#+END_EXAMPLE

** Priority Levels

Assign priorities to tasks:

#+BEGIN_EXAMPLE
* TODO [#A] High priority task
* TODO [#B] Medium priority task  
* TODO [#C] Low priority task
#+END_EXAMPLE

** Progress Logging

Track when tasks change state:

#+BEGIN_SRC elisp
(setq org-log-done 'time)          ; Log completion time
(setq org-log-done 'note)          ; Log completion with note
#+END_SRC

* Scheduling and Deadlines

** Timestamps

Insert timestamps for scheduling and deadlines:

- =C-c .= - Insert active timestamp
- =C-c != - Insert inactive timestamp
- =C-c C-d= - Add deadline
- =C-c C-s= - Schedule item

** Examples

#+BEGIN_EXAMPLE
* TODO Meeting with client
  SCHEDULED: <2024-01-15 Mon 14:00>

* TODO Submit project proposal
  DEADLINE: <2024-01-20 Sat>

* Project started <2024-01-10 Wed>
#+END_EXAMPLE

** Repeating Tasks

Create recurring tasks using repeater intervals:

#+BEGIN_EXAMPLE
* TODO Weekly team meeting
  SCHEDULED: <2024-01-15 Mon 10:00 +1w>

* TODO Pay rent
  DEADLINE: <2024-02-01 Thu +1m>
#+END_EXAMPLE

* Properties and Drawers

** Properties

Attach metadata to headlines using properties:

#+BEGIN_EXAMPLE
* Project Alpha
  :PROPERTIES:
  :EFFORT:   4:00
  :PRIORITY: A
  :ASSIGNED: John Doe
  :STATUS:   In Progress
  :END:
#+END_EXAMPLE

** Common Property Applications

Properties enable database-like functionality:

#+BEGIN_EXAMPLE
* Album Collection
** Dark Side of the Moon
   :PROPERTIES:
   :ARTIST:   Pink Floyd
   :YEAR:     1973
   :GENRE:    Progressive Rock
   :RATING:   5
   :END:
#+END_EXAMPLE

** Drawers

Store additional information in collapsible drawers:

#+BEGIN_EXAMPLE
* Meeting Notes
  :LOGBOOK:
  CLOCK: [2024-01-15 Mon 09:00]--[2024-01-15 Mon 10:30] =>  1:30
  - State "DONE"       from "TODO"       [2024-01-15 Mon 10:30]
  :END:
  
  :NOTES:
  Important points discussed during the meeting.
  :END:
#+END_EXAMPLE

* Tags

** Basic Tagging

Assign tags to headlines for categorization:

#+BEGIN_EXAMPLE
* TODO Review budget report                    :work:urgent:
* Call dentist                                 :personal:health:
* Plan vacation                                :personal:family:
#+END_EXAMPLE

** Tag Inheritance

Child headlines inherit parent tags:

#+BEGIN_EXAMPLE
* Work Projects                                :work:
** Marketing Campaign                          :marketing:
*** Create social media content               :content:
    (This inherits :work: and :marketing: tags)
#+END_EXAMPLE

** Tag Configuration

Define tag shortcuts and groups:

#+BEGIN_EXAMPLE
#+TAGS: @work @home @computer @phone
#+TAGS: urgent(u) someday(s) waiting(w)

* TODO Call client                             @phone:urgent:
#+END_EXAMPLE

* Tables

** Basic Tables

Create and edit tables with automatic formatting:

| Name     | Age | City        |
|----------+-----+-------------|
| John     |  25 | New York    |
| Sarah    |  30 | Los Angeles |
| Michael  |  22 | Chicago     |

** Table Navigation and Editing

- =TAB= - Move to next field
- =S-TAB= - Move to previous field
- =RET= - Move to next row
- =M-LEFT/RIGHT= - Move column left/right
- =M-UP/DOWN= - Move row up/down

** Spreadsheet Functions

Use formulas for calculations:

| Item     | Quantity | Price | Total |
|----------+----------+-------+-------|
| Apples   |        3 |  1.50 |  4.50 |
| Bananas  |        2 |  2.00 |  4.00 |
| Oranges  |        5 |  1.25 |  6.25 |
|----------+----------+-------+-------|
| Total    |       10 |       | 14.75 |
#+TBLFM: $4=$2*$3::@>$4=vsum(@2..@-1)

* Code Blocks and Babel

** Source Code Blocks

Embed executable code in your documents:

#+BEGIN_SRC python :results output
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

for i in range(10):
    print(f"F({i}) = {fibonacci(i)}")
#+END_SRC

** Language Support

Org Babel supports numerous programming languages:

#+BEGIN_SRC emacs-lisp
(message "Hello from Emacs Lisp!")
#+END_SRC

#+BEGIN_SRC shell
echo "Hello from Shell!"
ls -la
#+END_SRC

#+BEGIN_SRC R
data <- c(1, 2, 3, 4, 5)
mean(data)
#+END_SRC

** Header Arguments

Control code execution and output:

#+BEGIN_SRC python :var data=my-table :results table
# Process data from org table
return processed_data
#+END_SRC

#+BEGIN_SRC python :session :results file
import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4])
plt.savefig('plot.png')
'plot.png'
#+END_SRC

** Literate Programming

Combine documentation and code:

#+NAME: data-processing
#+BEGIN_SRC python :noweb yes
def process_data(raw_data):
    <<clean-data>>
    <<analyze-data>>
    return results
#+END_SRC

#+NAME: clean-data
#+BEGIN_SRC python
# Remove invalid entries
cleaned_data = [x for x in raw_data if x is not None]
#+END_SRC

#+NAME: analyze-data  
#+BEGIN_SRC python
# Perform statistical analysis
results = {'mean': sum(cleaned_data) / len(cleaned_data)}
#+END_SRC

* Column View

** Setting Up Column View

Define column properties for tabular data display:

#+BEGIN_EXAMPLE
#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS %EFFORT{:}

* Project Tasks
** TODO Design database schema           :backend:
   :PROPERTIES:
   :EFFORT:   8:00
   :END:
** TODO Create user interface            :frontend:
   :PROPERTIES:
   :EFFORT:   12:00
   :END:
#+END_EXAMPLE

** Using Column View

Activate and navigate column view:

- =C-c C-x C-c= - Enter column view
- =q= - Exit column view
- =TAB / S-TAB= - Navigate between columns
- =RET= - Edit current field

** Column View Applications

Perfect for project tracking and data overview:

#+BEGIN_EXAMPLE
#+COLUMNS: %20ITEM %Status %Owner %Deadline %EFFORT{:}

* Development Sprint
** TODO Implement user authentication      
   :PROPERTIES:
   :Status:   In Progress
   :Owner:    Alice
   :Deadline: <2024-01-20 Sat>
   :EFFORT:   6:00
   :END:
#+END_EXAMPLE

* Agenda Views

** Agenda Configuration

Set up files for agenda views:

#+BEGIN_SRC elisp
(setq org-agenda-files '("~/org/work.org" "~/org/personal.org"))
#+END_SRC

** Agenda Commands

Access different agenda views:

- =C-c a a= - Weekly agenda
- =C-c a t= - Global TODO list
- =C-c a m= - Match tags/properties
- =C-c a s= - Search for keywords

** Custom Agenda Views

Create specialized agenda displays:

#+BEGIN_SRC elisp
(setq org-agenda-custom-commands
      '(("w" "Work Tasks"
         ((agenda "")
          (tags-todo "work")
          (todo "WAITING")))
        ("p" "Projects"
         ((todo "PROJECT")
          (todo "STARTED")))))
#+END_SRC

* Time Tracking and Clocking

** Basic Clocking

Track time spent on tasks:

- =C-c C-x C-i= - Clock in
- =C-c C-x C-o= - Clock out
- =C-c C-x C-j= - Jump to current clock
- =C-c C-x C-x= - Cancel current clock

** Clock Reports

Generate time summaries:

#+BEGIN: clocktable :maxlevel 2 :scope subtree
#+CAPTION: Clock summary at [2024-01-15 Mon 17:00]
| Headline                     | Time   |
|------------------------------+--------|
| *Total time*                 | *8:30* |
|------------------------------+--------|
| Project Alpha                | 8:30   |
| \_  Database design          | 3:00   |
| \_  Frontend development     | 5:30   |
#+END:

** Effort Estimation

Set estimated effort for tasks:

#+BEGIN_EXAMPLE
* TODO Complete user manual
  :PROPERTIES:
  :EFFORT:   4:00
  :END:
#+END_EXAMPLE

* Capture System

** Capture Templates

Quick note capture from anywhere:

#+BEGIN_SRC elisp
(setq org-capture-templates
      '(("t" "Todo" entry (file "~/org/inbox.org")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("m" "Meeting" entry (file "~/org/meetings.org")
         "* Meeting with %? :meeting:\n  %U")))
#+END_SRC

** Capture Workflow

Efficient task and note creation:

- =C-c c= - Capture new item
- =C-c C-c= - Finish capture
- =C-c C-k= - Abort capture

* Refiling and Archiving

** Refiling System

Move items to appropriate locations:

#+BEGIN_SRC elisp
(setq org-refile-targets
      '(("~/org/projects.org" :maxlevel . 3)
        ("~/org/someday.org" :level . 1)
        ("~/org/reference.org" :maxlevel . 2)))
#+END_SRC

** Refile Commands

- =C-c C-w= - Refile current entry
- =C-u C-c C-w= - Jump to refile target
- =C-c M-w= - Copy (don't move) entry

** Archiving

Keep active files organized:

- =C-c C-x C-a= - Archive subtree
- =C-c C-x a= - Archive using default command

** Archive Configuration

#+BEGIN_SRC elisp
(setq org-archive-location "~/org/archive/%s_archive::")
#+END_SRC

* Export System

** Export Formats

Org Mode supports multiple export formats:

- =C-c C-e h h= - Export to HTML
- =C-c C-e l p= - Export to PDF via LaTeX
- =C-c C-e t A= - Export to ASCII
- =C-c C-e o o= - Export to ODT

** LaTeX/PDF Export

Professional document generation:

#+BEGIN_EXAMPLE
#+TITLE: My Document
#+AUTHOR: John Doe
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt,a4paper]
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{margin=1in}

* Introduction
This document demonstrates Org Mode's LaTeX export capabilities.

** Mathematical Equations
The Pythagorean theorem: $a^2 + b^2 = c^2$
#+END_EXAMPLE

** HTML Export

Web-ready documents:

#+BEGIN_EXAMPLE
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+OPTIONS: toc:2 num:t

* Web Document
This exports beautifully to HTML.
#+END_EXAMPLE

** Export Settings

Control export behavior:

#+BEGIN_EXAMPLE
#+OPTIONS: H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:t
#+END_EXAMPLE

* Advanced Features

** Sparse Trees

Filter and display specific content:

- =C-c /= - Create sparse tree
- =C-c / r= - Sparse tree by regex
- =C-c / t= - Sparse tree by TODO keyword
- =C-c / p= - Sparse tree by property

** Searching and Filtering

Find information quickly:

- =C-c / /= - Search by regex
- =C-c a m= - Match tags and properties
- =C-c a s= - Search for keywords

** Custom Keywords and Faces

Personalize your Org experience:

#+BEGIN_SRC elisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
        (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)")))

(setq org-todo-keyword-faces
      '(("TODO" . "red")
        ("STARTED" . "yellow")
        ("DONE" . "green")))
#+END_SRC

** Publishing Projects

Multi-file publishing system:

#+BEGIN_SRC elisp
(setq org-publish-project-alist
      '(("website"
         :base-directory "~/org/website/"
         :publishing-directory "~/public_html/"
         :publishing-function org-html-publish-to-html
         :recursive t)))
#+END_SRC

* Tips and Best Practices

** File Organization

- Use separate files for different contexts (work, personal, projects)
- Implement a consistent tagging system
- Regular archiving to maintain performance
- Use capture templates for quick input

** Workflow Optimization

- Set up meaningful TODO keywords for your workflow
- Use properties for structured data
- Leverage agenda views for daily planning
- Clock time for important tasks

** Performance

- Archive completed items regularly
- Limit agenda file sizes
- Use sparse trees for large documents
- Configure agenda optimizations

** Integration

- Use org-protocol for browser integration
- Set up mobile sync for on-the-go access
- Integrate with external tools via export
- Leverage Emacs packages for enhanced functionality

* Keyboard Shortcuts Reference

** Global Commands
- =C-c l= - Store link
- =C-c a= - Agenda dispatcher
- =C-c c= - Capture
- =C-c b= - Switch to Org buffer

** Structure Editing
- =TAB= - Cycle visibility
- =S-TAB= - Global visibility cycling
- =M-RET= - Insert heading
- =M-LEFT/RIGHT= - Promote/demote
- =M-UP/DOWN= - Move subtree

** TODO Management
- =C-c C-t= - Cycle TODO state
- =C-c C-d= - Add deadline
- =C-c C-s= - Schedule item
- =C-c ,= - Set priority

** Time and Clocking
- =C-c .= - Insert timestamp
- =C-c C-x C-i= - Clock in
- =C-c C-x C-o= - Clock out
- =C-c C-x C-j= - Go to clocked task

** Navigation and Search
- =C-c C-j= - Jump to headline
- =C-c /= - Sparse tree
- =C-c C-o= - Follow link
- =C-c C-c= - Context-dependent command

* Conclusion

This comprehensive guide covers the essential features of Org Mode. Each feature can be customized and extended to fit your specific workflow needs. The key to mastering Org Mode is to start with basic features and gradually incorporate more advanced functionality as your requirements grow.

Remember that Org Mode's power lies in its flexibility - adapt these examples to your specific use cases in cybersecurity, programming, and research work.